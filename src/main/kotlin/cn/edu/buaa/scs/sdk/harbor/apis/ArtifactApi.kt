/**
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cn.edu.buaa.scs.sdk.harbor.apis

import cn.edu.buaa.scs.sdk.harbor.infrastructure.*
import cn.edu.buaa.scs.sdk.harbor.models.Artifact
import cn.edu.buaa.scs.sdk.harbor.models.Label
import cn.edu.buaa.scs.sdk.harbor.models.Tag
import com.fasterxml.jackson.annotation.JsonProperty
import okhttp3.OkHttpClient
import java.io.IOException

class ArtifactApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) :
    ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://localhost/api/v2.0")
        }
    }

    /**
     * Add label to artifact
     * Add label to the specified artiact.
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param label The label that added to the artifact. Only the ID property is needed.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun addLabel(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        label: Label,
        xRequestId: kotlin.String? = null
    ): Unit {
        val localVarResponse = addLabelWithHttpInfo(
            projectName = projectName,
            repositoryName = repositoryName,
            reference = reference,
            label = label,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Add label to artifact
     * Add label to the specified artiact.
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param label The label that added to the artifact. Only the ID property is needed.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun addLabelWithHttpInfo(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        label: Label,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = addLabelRequestConfig(
            projectName = projectName,
            repositoryName = repositoryName,
            reference = reference,
            label = label,
            xRequestId = xRequestId
        )

        return request<Label, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addLabel
     *
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param label The label that added to the artifact. Only the ID property is needed.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun addLabelRequestConfig(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        label: Label,
        xRequestId: kotlin.String?
    ): RequestConfig<Label> {
        val localVariableBody = label
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "repository_name" + "}", repositoryName.toString())
                .replace("{" + "reference" + "}", reference.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Copy artifact
     * Copy the artifact specified in the \&quot;from\&quot; parameter to the repository.
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param from The artifact from which the new artifact is copied from, the format should be \&quot;project/repository:tag\&quot; or \&quot;project/repository@digest\&quot;.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun copyArtifact(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        from: kotlin.String,
        xRequestId: kotlin.String? = null
    ): Unit {
        val localVarResponse = copyArtifactWithHttpInfo(
            projectName = projectName,
            repositoryName = repositoryName,
            from = from,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Copy artifact
     * Copy the artifact specified in the \&quot;from\&quot; parameter to the repository.
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param from The artifact from which the new artifact is copied from, the format should be \&quot;project/repository:tag\&quot; or \&quot;project/repository@digest\&quot;.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun copyArtifactWithHttpInfo(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        from: kotlin.String,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = copyArtifactRequestConfig(
            projectName = projectName,
            repositoryName = repositoryName,
            from = from,
            xRequestId = xRequestId
        )

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation copyArtifact
     *
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param from The artifact from which the new artifact is copied from, the format should be \&quot;project/repository:tag\&quot; or \&quot;project/repository@digest\&quot;.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun copyArtifactRequestConfig(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        from: kotlin.String,
        xRequestId: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("from", listOf(from.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/projects/{project_name}/repositories/{repository_name}/artifacts".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "repository_name" + "}", repositoryName.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Create tag
     * Create a tag for the specified artifact
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param tag The JSON object of tag.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun createTag(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        tag: Tag,
        xRequestId: kotlin.String? = null
    ): Unit {
        val localVarResponse = createTagWithHttpInfo(
            projectName = projectName,
            repositoryName = repositoryName,
            reference = reference,
            tag = tag,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Create tag
     * Create a tag for the specified artifact
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param tag The JSON object of tag.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun createTagWithHttpInfo(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        tag: Tag,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = createTagRequestConfig(
            projectName = projectName,
            repositoryName = repositoryName,
            reference = reference,
            tag = tag,
            xRequestId = xRequestId
        )

        return request<Tag, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createTag
     *
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param tag The JSON object of tag.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun createTagRequestConfig(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        tag: Tag,
        xRequestId: kotlin.String?
    ): RequestConfig<Tag> {
        val localVariableBody = tag
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "repository_name" + "}", repositoryName.toString())
                .replace("{" + "reference" + "}", reference.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete the specific artifact
     * Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun deleteArtifact(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        xRequestId: kotlin.String? = null
    ): Unit {
        val localVarResponse = deleteArtifactWithHttpInfo(
            projectName = projectName,
            repositoryName = repositoryName,
            reference = reference,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Delete the specific artifact
     * Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteArtifactWithHttpInfo(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = deleteArtifactRequestConfig(
            projectName = projectName,
            repositoryName = repositoryName,
            reference = reference,
            xRequestId = xRequestId
        )

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteArtifact
     *
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun deleteArtifactRequestConfig(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        xRequestId: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "repository_name" + "}", repositoryName.toString())
                .replace("{" + "reference" + "}", reference.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete tag
     * Delete the tag of the specified artifact
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param tagName The name of the tag
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun deleteTag(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        tagName: kotlin.String,
        xRequestId: kotlin.String? = null
    ): Unit {
        val localVarResponse = deleteTagWithHttpInfo(
            projectName = projectName,
            repositoryName = repositoryName,
            reference = reference,
            tagName = tagName,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Delete tag
     * Delete the tag of the specified artifact
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param tagName The name of the tag
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteTagWithHttpInfo(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        tagName: kotlin.String,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = deleteTagRequestConfig(
            projectName = projectName,
            repositoryName = repositoryName,
            reference = reference,
            tagName = tagName,
            xRequestId = xRequestId
        )

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteTag
     *
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param tagName The name of the tag
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun deleteTagRequestConfig(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        tagName: kotlin.String,
        xRequestId: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags/{tag_name}".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "repository_name" + "}", repositoryName.toString())
                .replace("{" + "reference" + "}", reference.toString())
                .replace("{" + "tag_name" + "}", tagName.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter addition
     */
    enum class Addition_getAddition(val value: kotlin.String) {
        @JsonProperty(value = "build_history")
        buildHistory("build_history"),
        @JsonProperty(value = "values.yaml")
        valuesPeriodYaml("values.yaml"),
        @JsonProperty(value = "readme.md")
        readmePeriodMd("readme.md"),
        @JsonProperty(value = "dependencies")
        dependencies("dependencies"),
        @JsonProperty(value = "vulnerabilities")
        vulnerabilities("vulnerabilities")
    }

    /**
     * Get the addition of the specific artifact
     * Get the addition of the artifact specified by the reference under the project and repository.
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param addition The type of addition.
     * @param xRequestId An unique ID for the request (optional)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getAddition(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        addition: Addition_getAddition,
        xRequestId: kotlin.String? = null
    ): kotlin.String {
        val localVarResponse = getAdditionWithHttpInfo(
            projectName = projectName,
            repositoryName = repositoryName,
            reference = reference,
            addition = addition,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get the addition of the specific artifact
     * Get the addition of the artifact specified by the reference under the project and repository.
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param addition The type of addition.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getAdditionWithHttpInfo(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        addition: Addition_getAddition,
        xRequestId: kotlin.String?
    ): ApiResponse<kotlin.String?> {
        val localVariableConfig = getAdditionRequestConfig(
            projectName = projectName,
            repositoryName = repositoryName,
            reference = reference,
            addition = addition,
            xRequestId = xRequestId
        )

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAddition
     *
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param addition The type of addition.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getAdditionRequestConfig(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        addition: Addition_getAddition,
        xRequestId: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "repository_name" + "}", repositoryName.toString())
                .replace("{" + "reference" + "}", reference.toString())
                .replace("{" + "addition" + "}", addition.value.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get the specific artifact
     * Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param withTag Specify whether the tags are inclued inside the returning artifacts (optional, default to true)
     * @param withLabel Specify whether the labels are inclued inside the returning artifacts (optional, default to false)
     * @param withScanOverview Specify whether the scan overview is inclued inside the returning artifacts (optional, default to false)
     * @param withSignature Specify whether the signature is inclued inside the returning artifacts (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is inclued inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @return Artifact
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getArtifact(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        xRequestId: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10,
        withTag: kotlin.Boolean? = true,
        withLabel: kotlin.Boolean? = false,
        withScanOverview: kotlin.Boolean? = false,
        withSignature: kotlin.Boolean? = false,
        withImmutableStatus: kotlin.Boolean? = false
    ): Artifact {
        val localVarResponse = getArtifactWithHttpInfo(
            projectName = projectName,
            repositoryName = repositoryName,
            reference = reference,
            xRequestId = xRequestId,
            page = page,
            pageSize = pageSize,
            withTag = withTag,
            withLabel = withLabel,
            withScanOverview = withScanOverview,
            withSignature = withSignature,
            withImmutableStatus = withImmutableStatus
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Artifact
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get the specific artifact
     * Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param withTag Specify whether the tags are inclued inside the returning artifacts (optional, default to true)
     * @param withLabel Specify whether the labels are inclued inside the returning artifacts (optional, default to false)
     * @param withScanOverview Specify whether the scan overview is inclued inside the returning artifacts (optional, default to false)
     * @param withSignature Specify whether the signature is inclued inside the returning artifacts (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is inclued inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @return ApiResponse<Artifact?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getArtifactWithHttpInfo(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        withTag: kotlin.Boolean?,
        withLabel: kotlin.Boolean?,
        withScanOverview: kotlin.Boolean?,
        withSignature: kotlin.Boolean?,
        withImmutableStatus: kotlin.Boolean?
    ): ApiResponse<Artifact?> {
        val localVariableConfig = getArtifactRequestConfig(
            projectName = projectName,
            repositoryName = repositoryName,
            reference = reference,
            xRequestId = xRequestId,
            page = page,
            pageSize = pageSize,
            withTag = withTag,
            withLabel = withLabel,
            withScanOverview = withScanOverview,
            withSignature = withSignature,
            withImmutableStatus = withImmutableStatus
        )

        return request<Unit, Artifact>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getArtifact
     *
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param withTag Specify whether the tags are inclued inside the returning artifacts (optional, default to true)
     * @param withLabel Specify whether the labels are inclued inside the returning artifacts (optional, default to false)
     * @param withScanOverview Specify whether the scan overview is inclued inside the returning artifacts (optional, default to false)
     * @param withSignature Specify whether the signature is inclued inside the returning artifacts (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is inclued inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @return RequestConfig
     */
    fun getArtifactRequestConfig(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        withTag: kotlin.Boolean?,
        withLabel: kotlin.Boolean?,
        withScanOverview: kotlin.Boolean?,
        withSignature: kotlin.Boolean?,
        withImmutableStatus: kotlin.Boolean?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (withTag != null) {
                    put("with_tag", listOf(withTag.toString()))
                }
                if (withLabel != null) {
                    put("with_label", listOf(withLabel.toString()))
                }
                if (withScanOverview != null) {
                    put("with_scan_overview", listOf(withScanOverview.toString()))
                }
                if (withSignature != null) {
                    put("with_signature", listOf(withSignature.toString()))
                }
                if (withImmutableStatus != null) {
                    put("with_immutable_status", listOf(withImmutableStatus.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "repository_name" + "}", repositoryName.toString())
                .replace("{" + "reference" + "}", reference.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List artifacts
     * List artifacts under the specific project and repository. Except the basic properties, the other supported queries in \&quot;q\&quot; includes \&quot;tags&#x3D;*\&quot; to list only tagged artifacts, \&quot;tags&#x3D;nil\&quot; to list only untagged artifacts, \&quot;tags&#x3D;~v\&quot; to list artifacts whose tag fuzzy matches \&quot;v\&quot;, \&quot;tags&#x3D;v\&quot; to list artifact whose tag exactly matches \&quot;v\&quot;, \&quot;labels&#x3D;(id1, id2)\&quot; to list artifacts that both labels with id1 and id2 are added to
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param withTag Specify whether the tags are included inside the returning artifacts (optional, default to true)
     * @param withLabel Specify whether the labels are included inside the returning artifacts (optional, default to false)
     * @param withScanOverview Specify whether the scan overview is included inside the returning artifacts (optional, default to false)
     * @param withSignature Specify whether the signature is included inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is included inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @return kotlin.collections.List<Artifact>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listArtifacts(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        xRequestId: kotlin.String? = null,
        q: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10,
        withTag: kotlin.Boolean? = true,
        withLabel: kotlin.Boolean? = false,
        withScanOverview: kotlin.Boolean? = false,
        withSignature: kotlin.Boolean? = false,
        withImmutableStatus: kotlin.Boolean? = false
    ): kotlin.collections.List<Artifact> {
        val localVarResponse = listArtifactsWithHttpInfo(
            projectName = projectName,
            repositoryName = repositoryName,
            xRequestId = xRequestId,
            q = q,
            page = page,
            pageSize = pageSize,
            withTag = withTag,
            withLabel = withLabel,
            withScanOverview = withScanOverview,
            withSignature = withSignature,
            withImmutableStatus = withImmutableStatus
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Artifact>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * List artifacts
     * List artifacts under the specific project and repository. Except the basic properties, the other supported queries in \&quot;q\&quot; includes \&quot;tags&#x3D;*\&quot; to list only tagged artifacts, \&quot;tags&#x3D;nil\&quot; to list only untagged artifacts, \&quot;tags&#x3D;~v\&quot; to list artifacts whose tag fuzzy matches \&quot;v\&quot;, \&quot;tags&#x3D;v\&quot; to list artifact whose tag exactly matches \&quot;v\&quot;, \&quot;labels&#x3D;(id1, id2)\&quot; to list artifacts that both labels with id1 and id2 are added to
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param withTag Specify whether the tags are included inside the returning artifacts (optional, default to true)
     * @param withLabel Specify whether the labels are included inside the returning artifacts (optional, default to false)
     * @param withScanOverview Specify whether the scan overview is included inside the returning artifacts (optional, default to false)
     * @param withSignature Specify whether the signature is included inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is included inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @return ApiResponse<kotlin.collections.List<Artifact>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listArtifactsWithHttpInfo(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        xRequestId: kotlin.String?,
        q: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        withTag: kotlin.Boolean?,
        withLabel: kotlin.Boolean?,
        withScanOverview: kotlin.Boolean?,
        withSignature: kotlin.Boolean?,
        withImmutableStatus: kotlin.Boolean?
    ): ApiResponse<kotlin.collections.List<Artifact>?> {
        val localVariableConfig = listArtifactsRequestConfig(
            projectName = projectName,
            repositoryName = repositoryName,
            xRequestId = xRequestId,
            q = q,
            page = page,
            pageSize = pageSize,
            withTag = withTag,
            withLabel = withLabel,
            withScanOverview = withScanOverview,
            withSignature = withSignature,
            withImmutableStatus = withImmutableStatus
        )

        return request<Unit, kotlin.collections.List<Artifact>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listArtifacts
     *
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param withTag Specify whether the tags are included inside the returning artifacts (optional, default to true)
     * @param withLabel Specify whether the labels are included inside the returning artifacts (optional, default to false)
     * @param withScanOverview Specify whether the scan overview is included inside the returning artifacts (optional, default to false)
     * @param withSignature Specify whether the signature is included inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is included inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @return RequestConfig
     */
    fun listArtifactsRequestConfig(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        xRequestId: kotlin.String?,
        q: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        withTag: kotlin.Boolean?,
        withLabel: kotlin.Boolean?,
        withScanOverview: kotlin.Boolean?,
        withSignature: kotlin.Boolean?,
        withImmutableStatus: kotlin.Boolean?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (withTag != null) {
                    put("with_tag", listOf(withTag.toString()))
                }
                if (withLabel != null) {
                    put("with_label", listOf(withLabel.toString()))
                }
                if (withScanOverview != null) {
                    put("with_scan_overview", listOf(withScanOverview.toString()))
                }
                if (withSignature != null) {
                    put("with_signature", listOf(withSignature.toString()))
                }
                if (withImmutableStatus != null) {
                    put("with_immutable_status", listOf(withImmutableStatus.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name}/repositories/{repository_name}/artifacts".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "repository_name" + "}", repositoryName.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List tags
     * List tags of the specific artifact
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param withSignature Specify whether the signature is included inside the returning tags (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is included inside the returning tags (optional, default to false)
     * @return kotlin.collections.List<Tag>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listTags(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        xRequestId: kotlin.String? = null,
        q: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10,
        withSignature: kotlin.Boolean? = false,
        withImmutableStatus: kotlin.Boolean? = false
    ): kotlin.collections.List<Tag> {
        val localVarResponse = listTagsWithHttpInfo(
            projectName = projectName,
            repositoryName = repositoryName,
            reference = reference,
            xRequestId = xRequestId,
            q = q,
            page = page,
            pageSize = pageSize,
            withSignature = withSignature,
            withImmutableStatus = withImmutableStatus
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Tag>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * List tags
     * List tags of the specific artifact
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param withSignature Specify whether the signature is included inside the returning tags (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is included inside the returning tags (optional, default to false)
     * @return ApiResponse<kotlin.collections.List<Tag>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listTagsWithHttpInfo(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        xRequestId: kotlin.String?,
        q: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        withSignature: kotlin.Boolean?,
        withImmutableStatus: kotlin.Boolean?
    ): ApiResponse<kotlin.collections.List<Tag>?> {
        val localVariableConfig = listTagsRequestConfig(
            projectName = projectName,
            repositoryName = repositoryName,
            reference = reference,
            xRequestId = xRequestId,
            q = q,
            page = page,
            pageSize = pageSize,
            withSignature = withSignature,
            withImmutableStatus = withImmutableStatus
        )

        return request<Unit, kotlin.collections.List<Tag>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listTags
     *
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param withSignature Specify whether the signature is included inside the returning tags (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is included inside the returning tags (optional, default to false)
     * @return RequestConfig
     */
    fun listTagsRequestConfig(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        xRequestId: kotlin.String?,
        q: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        withSignature: kotlin.Boolean?,
        withImmutableStatus: kotlin.Boolean?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (withSignature != null) {
                    put("with_signature", listOf(withSignature.toString()))
                }
                if (withImmutableStatus != null) {
                    put("with_immutable_status", listOf(withImmutableStatus.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "repository_name" + "}", repositoryName.toString())
                .replace("{" + "reference" + "}", reference.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Remove label from artifact
     * Remove the label from the specified artiact.
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param labelId The ID of the label that removed from the artifact.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun removeLabel(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        labelId: kotlin.Long,
        xRequestId: kotlin.String? = null
    ): Unit {
        val localVarResponse = removeLabelWithHttpInfo(
            projectName = projectName,
            repositoryName = repositoryName,
            reference = reference,
            labelId = labelId,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Remove label from artifact
     * Remove the label from the specified artiact.
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param labelId The ID of the label that removed from the artifact.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun removeLabelWithHttpInfo(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        labelId: kotlin.Long,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = removeLabelRequestConfig(
            projectName = projectName,
            repositoryName = repositoryName,
            reference = reference,
            labelId = labelId,
            xRequestId = xRequestId
        )

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation removeLabel
     *
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param reference The reference of the artifact, can be digest or tag
     * @param labelId The ID of the label that removed from the artifact.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun removeLabelRequestConfig(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        reference: kotlin.String,
        labelId: kotlin.Long,
        xRequestId: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels/{label_id}".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "repository_name" + "}", repositoryName.toString())
                .replace("{" + "reference" + "}", reference.toString())
                .replace("{" + "label_id" + "}", labelId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
