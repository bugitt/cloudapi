/**
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cn.edu.buaa.scs.sdk.harbor.apis

import cn.edu.buaa.scs.sdk.harbor.infrastructure.*
import cn.edu.buaa.scs.sdk.harbor.models.*
import okhttp3.OkHttpClient
import java.io.IOException

class ScannerApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) :
    ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://localhost/api/v2.0")
        }
    }

    /**
     * Create a scanner registration
     * Creats a new scanner registration with the given data.
     * @param registration A scanner registration to be created.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun createScanner(registration: ScannerRegistrationReq, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = createScannerWithHttpInfo(registration = registration, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Create a scanner registration
     * Creats a new scanner registration with the given data.
     * @param registration A scanner registration to be created.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun createScannerWithHttpInfo(
        registration: ScannerRegistrationReq,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = createScannerRequestConfig(registration = registration, xRequestId = xRequestId)

        return request<ScannerRegistrationReq, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createScanner
     *
     * @param registration A scanner registration to be created.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun createScannerRequestConfig(
        registration: ScannerRegistrationReq,
        xRequestId: kotlin.String?
    ): RequestConfig<ScannerRegistrationReq> {
        val localVariableBody = registration
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/scanners",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete a scanner registration
     * Deletes the specified scanner registration.
     * @param registrationId The scanner registration identifier.
     * @param xRequestId An unique ID for the request (optional)
     * @return ScannerRegistration
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun deleteScanner(registrationId: kotlin.String, xRequestId: kotlin.String? = null): ScannerRegistration {
        val localVarResponse = deleteScannerWithHttpInfo(registrationId = registrationId, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ScannerRegistration
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Delete a scanner registration
     * Deletes the specified scanner registration.
     * @param registrationId The scanner registration identifier.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<ScannerRegistration?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteScannerWithHttpInfo(
        registrationId: kotlin.String,
        xRequestId: kotlin.String?
    ): ApiResponse<ScannerRegistration?> {
        val localVariableConfig = deleteScannerRequestConfig(registrationId = registrationId, xRequestId = xRequestId)

        return request<Unit, ScannerRegistration>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteScanner
     *
     * @param registrationId The scanner registration identifier.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun deleteScannerRequestConfig(registrationId: kotlin.String, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/scanners/{registration_id}".replace("{" + "registration_id" + "}", registrationId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get a scanner registration details
     * Retruns the details of the specified scanner registration.
     * @param registrationId The scanner registration identifer.
     * @param xRequestId An unique ID for the request (optional)
     * @return ScannerRegistration
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getScanner(registrationId: kotlin.String, xRequestId: kotlin.String? = null): ScannerRegistration {
        val localVarResponse = getScannerWithHttpInfo(registrationId = registrationId, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ScannerRegistration
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get a scanner registration details
     * Retruns the details of the specified scanner registration.
     * @param registrationId The scanner registration identifer.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<ScannerRegistration?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getScannerWithHttpInfo(
        registrationId: kotlin.String,
        xRequestId: kotlin.String?
    ): ApiResponse<ScannerRegistration?> {
        val localVariableConfig = getScannerRequestConfig(registrationId = registrationId, xRequestId = xRequestId)

        return request<Unit, ScannerRegistration>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getScanner
     *
     * @param registrationId The scanner registration identifer.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getScannerRequestConfig(registrationId: kotlin.String, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/scanners/{registration_id}".replace("{" + "registration_id" + "}", registrationId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get the metadata of the specified scanner registration
     * Get the metadata of the specified scanner registration, including the capabilities and customized properties.
     * @param registrationId The scanner registration identifier.
     * @param xRequestId An unique ID for the request (optional)
     * @return ScannerAdapterMetadata
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getScannerMetadata(registrationId: kotlin.String, xRequestId: kotlin.String? = null): ScannerAdapterMetadata {
        val localVarResponse = getScannerMetadataWithHttpInfo(registrationId = registrationId, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ScannerAdapterMetadata
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get the metadata of the specified scanner registration
     * Get the metadata of the specified scanner registration, including the capabilities and customized properties.
     * @param registrationId The scanner registration identifier.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<ScannerAdapterMetadata?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getScannerMetadataWithHttpInfo(
        registrationId: kotlin.String,
        xRequestId: kotlin.String?
    ): ApiResponse<ScannerAdapterMetadata?> {
        val localVariableConfig =
            getScannerMetadataRequestConfig(registrationId = registrationId, xRequestId = xRequestId)

        return request<Unit, ScannerAdapterMetadata>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getScannerMetadata
     *
     * @param registrationId The scanner registration identifier.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getScannerMetadataRequestConfig(
        registrationId: kotlin.String,
        xRequestId: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/scanners/{registration_id}/metadata".replace(
                "{" + "registration_id" + "}",
                registrationId.toString()
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List scanner registrations
     * Returns a list of currently configured scanner registrations.
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return kotlin.collections.List<ScannerRegistration>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listScanners(
        xRequestId: kotlin.String? = null,
        q: kotlin.String? = null,
        sort: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10
    ): kotlin.collections.List<ScannerRegistration> {
        val localVarResponse =
            listScannersWithHttpInfo(xRequestId = xRequestId, q = q, sort = sort, page = page, pageSize = pageSize)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<ScannerRegistration>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * List scanner registrations
     * Returns a list of currently configured scanner registrations.
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return ApiResponse<kotlin.collections.List<ScannerRegistration>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listScannersWithHttpInfo(
        xRequestId: kotlin.String?,
        q: kotlin.String?,
        sort: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): ApiResponse<kotlin.collections.List<ScannerRegistration>?> {
        val localVariableConfig =
            listScannersRequestConfig(xRequestId = xRequestId, q = q, sort = sort, page = page, pageSize = pageSize)

        return request<Unit, kotlin.collections.List<ScannerRegistration>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listScanners
     *
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return RequestConfig
     */
    fun listScannersRequestConfig(
        xRequestId: kotlin.String?,
        q: kotlin.String?,
        sort: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/scanners",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Tests scanner registration settings
     * Pings scanner adapter to test endpoint URL and authorization settings.
     * @param settings A scanner registration settings to be tested.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun pingScanner(settings: ScannerRegistrationSettings, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = pingScannerWithHttpInfo(settings = settings, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Tests scanner registration settings
     * Pings scanner adapter to test endpoint URL and authorization settings.
     * @param settings A scanner registration settings to be tested.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun pingScannerWithHttpInfo(settings: ScannerRegistrationSettings, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = pingScannerRequestConfig(settings = settings, xRequestId = xRequestId)

        return request<ScannerRegistrationSettings, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation pingScanner
     *
     * @param settings A scanner registration settings to be tested.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun pingScannerRequestConfig(
        settings: ScannerRegistrationSettings,
        xRequestId: kotlin.String?
    ): RequestConfig<ScannerRegistrationSettings> {
        val localVariableBody = settings
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/scanners/ping",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Set system default scanner registration
     * Set the specified scanner registration as the system default one.
     * @param registrationId The scanner registration identifier.
     * @param payload
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun setScannerAsDefault(
        registrationId: kotlin.String,
        payload: IsDefault,
        xRequestId: kotlin.String? = null
    ): Unit {
        val localVarResponse =
            setScannerAsDefaultWithHttpInfo(registrationId = registrationId, payload = payload, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Set system default scanner registration
     * Set the specified scanner registration as the system default one.
     * @param registrationId The scanner registration identifier.
     * @param payload
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun setScannerAsDefaultWithHttpInfo(
        registrationId: kotlin.String,
        payload: IsDefault,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = setScannerAsDefaultRequestConfig(
            registrationId = registrationId,
            payload = payload,
            xRequestId = xRequestId
        )

        return request<IsDefault, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation setScannerAsDefault
     *
     * @param registrationId The scanner registration identifier.
     * @param payload
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun setScannerAsDefaultRequestConfig(
        registrationId: kotlin.String,
        payload: IsDefault,
        xRequestId: kotlin.String?
    ): RequestConfig<IsDefault> {
        val localVariableBody = payload
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/scanners/{registration_id}".replace("{" + "registration_id" + "}", registrationId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update a scanner registration
     * Updates the specified scanner registration.
     * @param registrationId The scanner registration identifier.
     * @param registration A scanner registraiton to be updated.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun updateScanner(
        registrationId: kotlin.String,
        registration: ScannerRegistrationReq,
        xRequestId: kotlin.String? = null
    ): Unit {
        val localVarResponse = updateScannerWithHttpInfo(
            registrationId = registrationId,
            registration = registration,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Update a scanner registration
     * Updates the specified scanner registration.
     * @param registrationId The scanner registration identifier.
     * @param registration A scanner registraiton to be updated.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun updateScannerWithHttpInfo(
        registrationId: kotlin.String,
        registration: ScannerRegistrationReq,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = updateScannerRequestConfig(
            registrationId = registrationId,
            registration = registration,
            xRequestId = xRequestId
        )

        return request<ScannerRegistrationReq, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateScanner
     *
     * @param registrationId The scanner registration identifier.
     * @param registration A scanner registraiton to be updated.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun updateScannerRequestConfig(
        registrationId: kotlin.String,
        registration: ScannerRegistrationReq,
        xRequestId: kotlin.String?
    ): RequestConfig<ScannerRegistrationReq> {
        val localVariableBody = registration
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/scanners/{registration_id}".replace("{" + "registration_id" + "}", registrationId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
