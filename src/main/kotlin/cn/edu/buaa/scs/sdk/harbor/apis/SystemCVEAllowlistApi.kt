/**
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cn.edu.buaa.scs.sdk.harbor.apis

import cn.edu.buaa.scs.sdk.harbor.infrastructure.*
import cn.edu.buaa.scs.sdk.harbor.models.CVEAllowlist
import okhttp3.OkHttpClient
import java.io.IOException

class SystemCVEAllowlistApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) :
    ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://localhost/api/v2.0")
        }
    }

    /**
     * Get the system level allowlist of CVE.
     * Get the system level allowlist of CVE.  This API can be called by all authenticated users.
     * @param xRequestId An unique ID for the request (optional)
     * @return CVEAllowlist
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getSystemCVEAllowlist(xRequestId: kotlin.String? = null): CVEAllowlist {
        val localVarResponse = getSystemCVEAllowlistWithHttpInfo(xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CVEAllowlist
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get the system level allowlist of CVE.
     * Get the system level allowlist of CVE.  This API can be called by all authenticated users.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<CVEAllowlist?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemCVEAllowlistWithHttpInfo(xRequestId: kotlin.String?): ApiResponse<CVEAllowlist?> {
        val localVariableConfig = getSystemCVEAllowlistRequestConfig(xRequestId = xRequestId)

        return request<Unit, CVEAllowlist>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystemCVEAllowlist
     *
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getSystemCVEAllowlistRequestConfig(xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/system/CVEAllowlist",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update the system level allowlist of CVE.
     * This API overwrites the system level allowlist of CVE with the list in request body.  Only system Admin has permission to call this API.
     * @param xRequestId An unique ID for the request (optional)
     * @param allowlist The allowlist with new content (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun putSystemCVEAllowlist(xRequestId: kotlin.String? = null, allowlist: CVEAllowlist? = null): Unit {
        val localVarResponse = putSystemCVEAllowlistWithHttpInfo(xRequestId = xRequestId, allowlist = allowlist)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Update the system level allowlist of CVE.
     * This API overwrites the system level allowlist of CVE with the list in request body.  Only system Admin has permission to call this API.
     * @param xRequestId An unique ID for the request (optional)
     * @param allowlist The allowlist with new content (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun putSystemCVEAllowlistWithHttpInfo(xRequestId: kotlin.String?, allowlist: CVEAllowlist?): ApiResponse<Unit?> {
        val localVariableConfig = putSystemCVEAllowlistRequestConfig(xRequestId = xRequestId, allowlist = allowlist)

        return request<CVEAllowlist, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation putSystemCVEAllowlist
     *
     * @param xRequestId An unique ID for the request (optional)
     * @param allowlist The allowlist with new content (optional)
     * @return RequestConfig
     */
    fun putSystemCVEAllowlistRequestConfig(
        xRequestId: kotlin.String?,
        allowlist: CVEAllowlist?
    ): RequestConfig<CVEAllowlist> {
        val localVariableBody = allowlist
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/system/CVEAllowlist",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
