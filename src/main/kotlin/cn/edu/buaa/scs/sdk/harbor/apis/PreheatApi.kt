/**
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cn.edu.buaa.scs.sdk.harbor.apis

import cn.edu.buaa.scs.sdk.harbor.infrastructure.*
import cn.edu.buaa.scs.sdk.harbor.models.*
import okhttp3.OkHttpClient
import java.io.IOException

class PreheatApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) :
    ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://localhost/api/v2.0")
        }
    }

    /**
     * Create p2p provider instances
     * Create p2p provider instances
     * @param instance The JSON object of instance.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun createInstance(instance: Instance, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = createInstanceWithHttpInfo(instance = instance, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Create p2p provider instances
     * Create p2p provider instances
     * @param instance The JSON object of instance.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun createInstanceWithHttpInfo(instance: Instance, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = createInstanceRequestConfig(instance = instance, xRequestId = xRequestId)

        return request<Instance, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createInstance
     *
     * @param instance The JSON object of instance.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun createInstanceRequestConfig(instance: Instance, xRequestId: kotlin.String?): RequestConfig<Instance> {
        val localVariableBody = instance
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/p2p/preheat/instances",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Create a preheat policy under a project
     * Create a preheat policy under a project
     * @param projectName The name of the project
     * @param policy The policy schema info
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun createPolicy(projectName: kotlin.String, policy: PreheatPolicy, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse =
            createPolicyWithHttpInfo(projectName = projectName, policy = policy, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Create a preheat policy under a project
     * Create a preheat policy under a project
     * @param projectName The name of the project
     * @param policy The policy schema info
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun createPolicyWithHttpInfo(
        projectName: kotlin.String,
        policy: PreheatPolicy,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig =
            createPolicyRequestConfig(projectName = projectName, policy = policy, xRequestId = xRequestId)

        return request<PreheatPolicy, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createPolicy
     *
     * @param projectName The name of the project
     * @param policy The policy schema info
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun createPolicyRequestConfig(
        projectName: kotlin.String,
        policy: PreheatPolicy,
        xRequestId: kotlin.String?
    ): RequestConfig<PreheatPolicy> {
        val localVariableBody = policy
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/projects/{project_name}/preheat/policies".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete the specified P2P provider instance
     * Delete the specified P2P provider instance
     * @param preheatInstanceName Instance Name
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun deleteInstance(preheatInstanceName: kotlin.String, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse =
            deleteInstanceWithHttpInfo(preheatInstanceName = preheatInstanceName, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Delete the specified P2P provider instance
     * Delete the specified P2P provider instance
     * @param preheatInstanceName Instance Name
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteInstanceWithHttpInfo(preheatInstanceName: kotlin.String, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig =
            deleteInstanceRequestConfig(preheatInstanceName = preheatInstanceName, xRequestId = xRequestId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteInstance
     *
     * @param preheatInstanceName Instance Name
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun deleteInstanceRequestConfig(
        preheatInstanceName: kotlin.String,
        xRequestId: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/p2p/preheat/instances/{preheat_instance_name}".replace(
                "{" + "preheat_instance_name" + "}",
                preheatInstanceName.toString()
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete a preheat policy
     * Delete a preheat policy
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun deletePolicy(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        xRequestId: kotlin.String? = null
    ): Unit {
        val localVarResponse = deletePolicyWithHttpInfo(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Delete a preheat policy
     * Delete a preheat policy
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deletePolicyWithHttpInfo(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = deletePolicyRequestConfig(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            xRequestId = xRequestId
        )

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deletePolicy
     *
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun deletePolicyRequestConfig(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        xRequestId: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/projects/{project_name}/preheat/policies/{preheat_policy_name}".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "preheat_policy_name" + "}", preheatPolicyName.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get a execution detail by id
     * Get a execution detail by id
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param executionId Execution ID
     * @param xRequestId An unique ID for the request (optional)
     * @return Execution
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getExecution(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        executionId: kotlin.Int,
        xRequestId: kotlin.String? = null
    ): Execution {
        val localVarResponse = getExecutionWithHttpInfo(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            executionId = executionId,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Execution
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get a execution detail by id
     * Get a execution detail by id
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param executionId Execution ID
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Execution?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getExecutionWithHttpInfo(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        executionId: kotlin.Int,
        xRequestId: kotlin.String?
    ): ApiResponse<Execution?> {
        val localVariableConfig = getExecutionRequestConfig(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            executionId = executionId,
            xRequestId = xRequestId
        )

        return request<Unit, Execution>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getExecution
     *
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param executionId Execution ID
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getExecutionRequestConfig(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        executionId: kotlin.Int,
        xRequestId: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "preheat_policy_name" + "}", preheatPolicyName.toString())
                .replace("{" + "execution_id" + "}", executionId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get a P2P provider instance
     * Get a P2P provider instance
     * @param preheatInstanceName Instance Name
     * @param xRequestId An unique ID for the request (optional)
     * @return Instance
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getInstance(preheatInstanceName: kotlin.String, xRequestId: kotlin.String? = null): Instance {
        val localVarResponse =
            getInstanceWithHttpInfo(preheatInstanceName = preheatInstanceName, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Instance
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get a P2P provider instance
     * Get a P2P provider instance
     * @param preheatInstanceName Instance Name
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Instance?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getInstanceWithHttpInfo(
        preheatInstanceName: kotlin.String,
        xRequestId: kotlin.String?
    ): ApiResponse<Instance?> {
        val localVariableConfig =
            getInstanceRequestConfig(preheatInstanceName = preheatInstanceName, xRequestId = xRequestId)

        return request<Unit, Instance>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getInstance
     *
     * @param preheatInstanceName Instance Name
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getInstanceRequestConfig(preheatInstanceName: kotlin.String, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/p2p/preheat/instances/{preheat_instance_name}".replace(
                "{" + "preheat_instance_name" + "}",
                preheatInstanceName.toString()
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get a preheat policy
     * Get a preheat policy
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param xRequestId An unique ID for the request (optional)
     * @return PreheatPolicy
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getPolicy(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        xRequestId: kotlin.String? = null
    ): PreheatPolicy {
        val localVarResponse = getPolicyWithHttpInfo(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PreheatPolicy
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get a preheat policy
     * Get a preheat policy
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<PreheatPolicy?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPolicyWithHttpInfo(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        xRequestId: kotlin.String?
    ): ApiResponse<PreheatPolicy?> {
        val localVariableConfig = getPolicyRequestConfig(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            xRequestId = xRequestId
        )

        return request<Unit, PreheatPolicy>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getPolicy
     *
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getPolicyRequestConfig(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        xRequestId: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name}/preheat/policies/{preheat_policy_name}".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "preheat_policy_name" + "}", preheatPolicyName.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get the log text stream of the specified task for the given execution
     * Get the log text stream of the specified task for the given execution
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param executionId Execution ID
     * @param taskId Task ID
     * @param xRequestId An unique ID for the request (optional)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getPreheatLog(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        executionId: kotlin.Int,
        taskId: kotlin.Int,
        xRequestId: kotlin.String? = null
    ): kotlin.String {
        val localVarResponse = getPreheatLogWithHttpInfo(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            executionId = executionId,
            taskId = taskId,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get the log text stream of the specified task for the given execution
     * Get the log text stream of the specified task for the given execution
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param executionId Execution ID
     * @param taskId Task ID
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPreheatLogWithHttpInfo(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        executionId: kotlin.Int,
        taskId: kotlin.Int,
        xRequestId: kotlin.String?
    ): ApiResponse<kotlin.String?> {
        val localVariableConfig = getPreheatLogRequestConfig(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            executionId = executionId,
            taskId = taskId,
            xRequestId = xRequestId
        )

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getPreheatLog
     *
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param executionId Execution ID
     * @param taskId Task ID
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getPreheatLogRequestConfig(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        executionId: kotlin.Int,
        taskId: kotlin.Int,
        xRequestId: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks/{task_id}/logs".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "preheat_policy_name" + "}", preheatPolicyName.toString())
                .replace("{" + "execution_id" + "}", executionId.toString())
                .replace("{" + "task_id" + "}", taskId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List executions for the given policy
     * List executions for the given policy
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @return kotlin.collections.List<Execution>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listExecutions(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        xRequestId: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10,
        q: kotlin.String? = null
    ): kotlin.collections.List<Execution> {
        val localVarResponse = listExecutionsWithHttpInfo(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            xRequestId = xRequestId,
            page = page,
            pageSize = pageSize,
            q = q
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Execution>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * List executions for the given policy
     * List executions for the given policy
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @return ApiResponse<kotlin.collections.List<Execution>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listExecutionsWithHttpInfo(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        q: kotlin.String?
    ): ApiResponse<kotlin.collections.List<Execution>?> {
        val localVariableConfig = listExecutionsRequestConfig(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            xRequestId = xRequestId,
            page = page,
            pageSize = pageSize,
            q = q
        )

        return request<Unit, kotlin.collections.List<Execution>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listExecutions
     *
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @return RequestConfig
     */
    fun listExecutionsRequestConfig(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        q: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "preheat_policy_name" + "}", preheatPolicyName.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List P2P provider instances
     * List P2P provider instances
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @return kotlin.collections.List<Instance>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listInstances(
        xRequestId: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10,
        q: kotlin.String? = null
    ): kotlin.collections.List<Instance> {
        val localVarResponse =
            listInstancesWithHttpInfo(xRequestId = xRequestId, page = page, pageSize = pageSize, q = q)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Instance>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * List P2P provider instances
     * List P2P provider instances
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @return ApiResponse<kotlin.collections.List<Instance>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listInstancesWithHttpInfo(
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        q: kotlin.String?
    ): ApiResponse<kotlin.collections.List<Instance>?> {
        val localVariableConfig =
            listInstancesRequestConfig(xRequestId = xRequestId, page = page, pageSize = pageSize, q = q)

        return request<Unit, kotlin.collections.List<Instance>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listInstances
     *
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @return RequestConfig
     */
    fun listInstancesRequestConfig(
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        q: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/p2p/preheat/instances",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List preheat policies
     * List preheat policies
     * @param projectName The name of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @return kotlin.collections.List<PreheatPolicy>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listPolicies(
        projectName: kotlin.String,
        xRequestId: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10,
        q: kotlin.String? = null
    ): kotlin.collections.List<PreheatPolicy> {
        val localVarResponse = listPoliciesWithHttpInfo(
            projectName = projectName,
            xRequestId = xRequestId,
            page = page,
            pageSize = pageSize,
            q = q
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<PreheatPolicy>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * List preheat policies
     * List preheat policies
     * @param projectName The name of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @return ApiResponse<kotlin.collections.List<PreheatPolicy>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listPoliciesWithHttpInfo(
        projectName: kotlin.String,
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        q: kotlin.String?
    ): ApiResponse<kotlin.collections.List<PreheatPolicy>?> {
        val localVariableConfig = listPoliciesRequestConfig(
            projectName = projectName,
            xRequestId = xRequestId,
            page = page,
            pageSize = pageSize,
            q = q
        )

        return request<Unit, kotlin.collections.List<PreheatPolicy>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listPolicies
     *
     * @param projectName The name of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @return RequestConfig
     */
    fun listPoliciesRequestConfig(
        projectName: kotlin.String,
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        q: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name}/preheat/policies".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List P2P providers
     * List P2P providers
     * @param xRequestId An unique ID for the request (optional)
     * @return kotlin.collections.List<Metadata>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listProviders(xRequestId: kotlin.String? = null): kotlin.collections.List<Metadata> {
        val localVarResponse = listProvidersWithHttpInfo(xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Metadata>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * List P2P providers
     * List P2P providers
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<kotlin.collections.List<Metadata>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listProvidersWithHttpInfo(xRequestId: kotlin.String?): ApiResponse<kotlin.collections.List<Metadata>?> {
        val localVariableConfig = listProvidersRequestConfig(xRequestId = xRequestId)

        return request<Unit, kotlin.collections.List<Metadata>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listProviders
     *
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun listProvidersRequestConfig(xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/p2p/preheat/providers",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get all providers at project level
     * Get all providers at project level
     * @param projectName The name of the project
     * @param xRequestId An unique ID for the request (optional)
     * @return kotlin.collections.List<ProviderUnderProject>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listProvidersUnderProject(
        projectName: kotlin.String,
        xRequestId: kotlin.String? = null
    ): kotlin.collections.List<ProviderUnderProject> {
        val localVarResponse = listProvidersUnderProjectWithHttpInfo(projectName = projectName, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<ProviderUnderProject>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get all providers at project level
     * Get all providers at project level
     * @param projectName The name of the project
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<kotlin.collections.List<ProviderUnderProject>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listProvidersUnderProjectWithHttpInfo(
        projectName: kotlin.String,
        xRequestId: kotlin.String?
    ): ApiResponse<kotlin.collections.List<ProviderUnderProject>?> {
        val localVariableConfig =
            listProvidersUnderProjectRequestConfig(projectName = projectName, xRequestId = xRequestId)

        return request<Unit, kotlin.collections.List<ProviderUnderProject>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listProvidersUnderProject
     *
     * @param projectName The name of the project
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun listProvidersUnderProjectRequestConfig(
        projectName: kotlin.String,
        xRequestId: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name}/preheat/providers".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List all the related tasks for the given execution
     * List all the related tasks for the given execution
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param executionId Execution ID
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @return kotlin.collections.List<Task>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listTasks(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        executionId: kotlin.Int,
        xRequestId: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10,
        q: kotlin.String? = null
    ): kotlin.collections.List<Task> {
        val localVarResponse = listTasksWithHttpInfo(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            executionId = executionId,
            xRequestId = xRequestId,
            page = page,
            pageSize = pageSize,
            q = q
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Task>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * List all the related tasks for the given execution
     * List all the related tasks for the given execution
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param executionId Execution ID
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @return ApiResponse<kotlin.collections.List<Task>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listTasksWithHttpInfo(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        executionId: kotlin.Int,
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        q: kotlin.String?
    ): ApiResponse<kotlin.collections.List<Task>?> {
        val localVariableConfig = listTasksRequestConfig(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            executionId = executionId,
            xRequestId = xRequestId,
            page = page,
            pageSize = pageSize,
            q = q
        )

        return request<Unit, kotlin.collections.List<Task>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listTasks
     *
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param executionId Execution ID
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @return RequestConfig
     */
    fun listTasksRequestConfig(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        executionId: kotlin.Int,
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        q: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "preheat_policy_name" + "}", preheatPolicyName.toString())
                .replace("{" + "execution_id" + "}", executionId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Manual preheat
     * Manual preheat
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param policy The policy schema info
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun manualPreheat(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        policy: PreheatPolicy,
        xRequestId: kotlin.String? = null
    ): Unit {
        val localVarResponse = manualPreheatWithHttpInfo(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            policy = policy,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Manual preheat
     * Manual preheat
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param policy The policy schema info
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun manualPreheatWithHttpInfo(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        policy: PreheatPolicy,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = manualPreheatRequestConfig(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            policy = policy,
            xRequestId = xRequestId
        )

        return request<PreheatPolicy, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation manualPreheat
     *
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param policy The policy schema info
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun manualPreheatRequestConfig(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        policy: PreheatPolicy,
        xRequestId: kotlin.String?
    ): RequestConfig<PreheatPolicy> {
        val localVariableBody = policy
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/projects/{project_name}/preheat/policies/{preheat_policy_name}".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "preheat_policy_name" + "}", preheatPolicyName.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Ping status of a instance.
     * This endpoint checks status of a instance, the instance can be given by ID or Endpoint URL (together with credential)
     * @param instance The JSON object of instance.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun pingInstances(instance: Instance, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = pingInstancesWithHttpInfo(instance = instance, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Ping status of a instance.
     * This endpoint checks status of a instance, the instance can be given by ID or Endpoint URL (together with credential)
     * @param instance The JSON object of instance.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun pingInstancesWithHttpInfo(instance: Instance, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = pingInstancesRequestConfig(instance = instance, xRequestId = xRequestId)

        return request<Instance, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation pingInstances
     *
     * @param instance The JSON object of instance.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun pingInstancesRequestConfig(instance: Instance, xRequestId: kotlin.String?): RequestConfig<Instance> {
        val localVariableBody = instance
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/p2p/preheat/instances/ping",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Stop a execution
     * Stop a execution
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param executionId Execution ID
     * @param execution The data of execution
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun stopExecution(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        executionId: kotlin.Int,
        execution: Execution,
        xRequestId: kotlin.String? = null
    ): Unit {
        val localVarResponse = stopExecutionWithHttpInfo(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            executionId = executionId,
            execution = execution,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Stop a execution
     * Stop a execution
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param executionId Execution ID
     * @param execution The data of execution
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun stopExecutionWithHttpInfo(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        executionId: kotlin.Int,
        execution: Execution,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = stopExecutionRequestConfig(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            executionId = executionId,
            execution = execution,
            xRequestId = xRequestId
        )

        return request<Execution, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation stopExecution
     *
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param executionId Execution ID
     * @param execution The data of execution
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun stopExecutionRequestConfig(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        executionId: kotlin.Int,
        execution: Execution,
        xRequestId: kotlin.String?
    ): RequestConfig<Execution> {
        val localVariableBody = execution
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "preheat_policy_name" + "}", preheatPolicyName.toString())
                .replace("{" + "execution_id" + "}", executionId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update the specified P2P provider instance
     * Update the specified P2P provider instance
     * @param preheatInstanceName Instance Name
     * @param instance The instance to update
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun updateInstance(
        preheatInstanceName: kotlin.String,
        instance: Instance,
        xRequestId: kotlin.String? = null
    ): Unit {
        val localVarResponse = updateInstanceWithHttpInfo(
            preheatInstanceName = preheatInstanceName,
            instance = instance,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Update the specified P2P provider instance
     * Update the specified P2P provider instance
     * @param preheatInstanceName Instance Name
     * @param instance The instance to update
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun updateInstanceWithHttpInfo(
        preheatInstanceName: kotlin.String,
        instance: Instance,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = updateInstanceRequestConfig(
            preheatInstanceName = preheatInstanceName,
            instance = instance,
            xRequestId = xRequestId
        )

        return request<Instance, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateInstance
     *
     * @param preheatInstanceName Instance Name
     * @param instance The instance to update
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun updateInstanceRequestConfig(
        preheatInstanceName: kotlin.String,
        instance: Instance,
        xRequestId: kotlin.String?
    ): RequestConfig<Instance> {
        val localVariableBody = instance
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/p2p/preheat/instances/{preheat_instance_name}".replace(
                "{" + "preheat_instance_name" + "}",
                preheatInstanceName.toString()
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update preheat policy
     * Update preheat policy
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param policy The policy schema info
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun updatePolicy(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        policy: PreheatPolicy,
        xRequestId: kotlin.String? = null
    ): Unit {
        val localVarResponse = updatePolicyWithHttpInfo(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            policy = policy,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Update preheat policy
     * Update preheat policy
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param policy The policy schema info
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun updatePolicyWithHttpInfo(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        policy: PreheatPolicy,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = updatePolicyRequestConfig(
            projectName = projectName,
            preheatPolicyName = preheatPolicyName,
            policy = policy,
            xRequestId = xRequestId
        )

        return request<PreheatPolicy, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updatePolicy
     *
     * @param projectName The name of the project
     * @param preheatPolicyName Preheat Policy Name
     * @param policy The policy schema info
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun updatePolicyRequestConfig(
        projectName: kotlin.String,
        preheatPolicyName: kotlin.String,
        policy: PreheatPolicy,
        xRequestId: kotlin.String?
    ): RequestConfig<PreheatPolicy> {
        val localVariableBody = policy
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/projects/{project_name}/preheat/policies/{preheat_policy_name}".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "preheat_policy_name" + "}", preheatPolicyName.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
