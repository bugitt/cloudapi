/**
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cn.edu.buaa.scs.sdk.harbor.apis

import cn.edu.buaa.scs.sdk.harbor.infrastructure.*
import cn.edu.buaa.scs.sdk.harbor.models.Repository
import okhttp3.OkHttpClient
import java.io.IOException

class RepositoryApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) :
    ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://localhost/api/v2.0")
        }
    }

    /**
     * Delete repository
     * Delete the repository specified by name
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun deleteRepository(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        xRequestId: kotlin.String? = null
    ): Unit {
        val localVarResponse = deleteRepositoryWithHttpInfo(
            projectName = projectName,
            repositoryName = repositoryName,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Delete repository
     * Delete the repository specified by name
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteRepositoryWithHttpInfo(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = deleteRepositoryRequestConfig(
            projectName = projectName,
            repositoryName = repositoryName,
            xRequestId = xRequestId
        )

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteRepository
     *
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun deleteRepositoryRequestConfig(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        xRequestId: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/projects/{project_name}/repositories/{repository_name}".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "repository_name" + "}", repositoryName.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get repository
     * Get the repository specified by name
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param xRequestId An unique ID for the request (optional)
     * @return Repository
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getRepository(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        xRequestId: kotlin.String? = null
    ): Repository {
        val localVarResponse = getRepositoryWithHttpInfo(
            projectName = projectName,
            repositoryName = repositoryName,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Repository
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get repository
     * Get the repository specified by name
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Repository?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRepositoryWithHttpInfo(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        xRequestId: kotlin.String?
    ): ApiResponse<Repository?> {
        val localVariableConfig = getRepositoryRequestConfig(
            projectName = projectName,
            repositoryName = repositoryName,
            xRequestId = xRequestId
        )

        return request<Unit, Repository>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRepository
     *
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getRepositoryRequestConfig(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        xRequestId: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name}/repositories/{repository_name}".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "repository_name" + "}", repositoryName.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List repositories
     * List repositories of the specified project
     * @param projectName The name of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return kotlin.collections.List<Repository>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listRepositories(
        projectName: kotlin.String,
        xRequestId: kotlin.String? = null,
        q: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10
    ): kotlin.collections.List<Repository> {
        val localVarResponse = listRepositoriesWithHttpInfo(
            projectName = projectName,
            xRequestId = xRequestId,
            q = q,
            page = page,
            pageSize = pageSize
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Repository>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * List repositories
     * List repositories of the specified project
     * @param projectName The name of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return ApiResponse<kotlin.collections.List<Repository>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listRepositoriesWithHttpInfo(
        projectName: kotlin.String,
        xRequestId: kotlin.String?,
        q: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): ApiResponse<kotlin.collections.List<Repository>?> {
        val localVariableConfig = listRepositoriesRequestConfig(
            projectName = projectName,
            xRequestId = xRequestId,
            q = q,
            page = page,
            pageSize = pageSize
        )

        return request<Unit, kotlin.collections.List<Repository>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listRepositories
     *
     * @param projectName The name of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return RequestConfig
     */
    fun listRepositoriesRequestConfig(
        projectName: kotlin.String,
        xRequestId: kotlin.String?,
        q: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name}/repositories".replace("{" + "project_name" + "}", projectName.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update repository
     * Update the repository specified by name
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param repository The JSON object of repository.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun updateRepository(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        repository: Repository,
        xRequestId: kotlin.String? = null
    ): Unit {
        val localVarResponse = updateRepositoryWithHttpInfo(
            projectName = projectName,
            repositoryName = repositoryName,
            repository = repository,
            xRequestId = xRequestId
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Update repository
     * Update the repository specified by name
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param repository The JSON object of repository.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun updateRepositoryWithHttpInfo(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        repository: Repository,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = updateRepositoryRequestConfig(
            projectName = projectName,
            repositoryName = repositoryName,
            repository = repository,
            xRequestId = xRequestId
        )

        return request<Repository, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateRepository
     *
     * @param projectName The name of the project
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb
     * @param repository The JSON object of repository.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun updateRepositoryRequestConfig(
        projectName: kotlin.String,
        repositoryName: kotlin.String,
        repository: Repository,
        xRequestId: kotlin.String?
    ): RequestConfig<Repository> {
        val localVariableBody = repository
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/projects/{project_name}/repositories/{repository_name}".replace(
                "{" + "project_name" + "}",
                projectName.toString()
            ).replace("{" + "repository_name" + "}", repositoryName.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
