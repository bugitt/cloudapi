/**
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cn.edu.buaa.scs.sdk.harbor.apis

import cn.edu.buaa.scs.sdk.harbor.infrastructure.*
import cn.edu.buaa.scs.sdk.harbor.models.*
import okhttp3.OkHttpClient
import java.io.IOException

class RetentionApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) :
    ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://localhost/api/v2.0")
        }
    }

    /**
     * Create Retention Policy
     * Create Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when no retention policy binded to project yet.
     * @param policy Create Retention Policy successfully.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun createRetention(policy: RetentionPolicy, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = createRetentionWithHttpInfo(policy = policy, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Create Retention Policy
     * Create Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when no retention policy binded to project yet.
     * @param policy Create Retention Policy successfully.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun createRetentionWithHttpInfo(policy: RetentionPolicy, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = createRetentionRequestConfig(policy = policy, xRequestId = xRequestId)

        return request<RetentionPolicy, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createRetention
     *
     * @param policy Create Retention Policy successfully.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun createRetentionRequestConfig(
        policy: RetentionPolicy,
        xRequestId: kotlin.String?
    ): RequestConfig<RetentionPolicy> {
        val localVariableBody = policy
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/retentions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete Retention Policy
     * Delete Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project.
     * @param id Retention ID.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun deleteRetention(id: kotlin.Long, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = deleteRetentionWithHttpInfo(id = id, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Delete Retention Policy
     * Delete Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project.
     * @param id Retention ID.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteRetentionWithHttpInfo(id: kotlin.Long, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = deleteRetentionRequestConfig(id = id, xRequestId = xRequestId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteRetention
     *
     * @param id Retention ID.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun deleteRetentionRequestConfig(id: kotlin.Long, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/retentions/{id}".replace("{" + "id" + "}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get Retention Metadatas
     * Get Retention Metadatas.
     * @param xRequestId An unique ID for the request (optional)
     * @return RetentionMetadata
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getRentenitionMetadata(xRequestId: kotlin.String? = null): RetentionMetadata {
        val localVarResponse = getRentenitionMetadataWithHttpInfo(xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RetentionMetadata
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get Retention Metadatas
     * Get Retention Metadatas.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<RetentionMetadata?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRentenitionMetadataWithHttpInfo(xRequestId: kotlin.String?): ApiResponse<RetentionMetadata?> {
        val localVariableConfig = getRentenitionMetadataRequestConfig(xRequestId = xRequestId)

        return request<Unit, RetentionMetadata>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRentenitionMetadata
     *
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getRentenitionMetadataRequestConfig(xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/retentions/metadatas",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get Retention Policy
     * Get Retention Policy.
     * @param id Retention ID.
     * @param xRequestId An unique ID for the request (optional)
     * @return RetentionPolicy
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getRetention(id: kotlin.Long, xRequestId: kotlin.String? = null): RetentionPolicy {
        val localVarResponse = getRetentionWithHttpInfo(id = id, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RetentionPolicy
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get Retention Policy
     * Get Retention Policy.
     * @param id Retention ID.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<RetentionPolicy?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRetentionWithHttpInfo(id: kotlin.Long, xRequestId: kotlin.String?): ApiResponse<RetentionPolicy?> {
        val localVariableConfig = getRetentionRequestConfig(id = id, xRequestId = xRequestId)

        return request<Unit, RetentionPolicy>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRetention
     *
     * @param id Retention ID.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getRetentionRequestConfig(id: kotlin.Long, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/retentions/{id}".replace("{" + "id" + "}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get Retention job task log
     * Get Retention job task log, tags ratain or deletion detail will be shown in a table.
     * @param id Retention ID.
     * @param eid Retention execution ID.
     * @param tid Retention execution ID.
     * @param xRequestId An unique ID for the request (optional)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getRetentionTaskLog(
        id: kotlin.Long,
        eid: kotlin.Long,
        tid: kotlin.Long,
        xRequestId: kotlin.String? = null
    ): kotlin.String {
        val localVarResponse = getRetentionTaskLogWithHttpInfo(id = id, eid = eid, tid = tid, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get Retention job task log
     * Get Retention job task log, tags ratain or deletion detail will be shown in a table.
     * @param id Retention ID.
     * @param eid Retention execution ID.
     * @param tid Retention execution ID.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRetentionTaskLogWithHttpInfo(
        id: kotlin.Long,
        eid: kotlin.Long,
        tid: kotlin.Long,
        xRequestId: kotlin.String?
    ): ApiResponse<kotlin.String?> {
        val localVariableConfig =
            getRetentionTaskLogRequestConfig(id = id, eid = eid, tid = tid, xRequestId = xRequestId)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRetentionTaskLog
     *
     * @param id Retention ID.
     * @param eid Retention execution ID.
     * @param tid Retention execution ID.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getRetentionTaskLogRequestConfig(
        id: kotlin.Long,
        eid: kotlin.Long,
        tid: kotlin.Long,
        xRequestId: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/retentions/{id}/executions/{eid}/tasks/{tid}".replace("{" + "id" + "}", id.toString())
                .replace("{" + "eid" + "}", eid.toString()).replace("{" + "tid" + "}", tid.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get Retention executions
     * Get Retention executions, execution status may be delayed before job service schedule it up.
     * @param id Retention ID.
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number. (optional)
     * @param pageSize The size of per page. (optional)
     * @return kotlin.collections.List<RetentionExecution>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listRetentionExecutions(
        id: kotlin.Long,
        xRequestId: kotlin.String? = null,
        page: kotlin.Long? = null,
        pageSize: kotlin.Long? = null
    ): kotlin.collections.List<RetentionExecution> {
        val localVarResponse =
            listRetentionExecutionsWithHttpInfo(id = id, xRequestId = xRequestId, page = page, pageSize = pageSize)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<RetentionExecution>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get Retention executions
     * Get Retention executions, execution status may be delayed before job service schedule it up.
     * @param id Retention ID.
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number. (optional)
     * @param pageSize The size of per page. (optional)
     * @return ApiResponse<kotlin.collections.List<RetentionExecution>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listRetentionExecutionsWithHttpInfo(
        id: kotlin.Long,
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): ApiResponse<kotlin.collections.List<RetentionExecution>?> {
        val localVariableConfig =
            listRetentionExecutionsRequestConfig(id = id, xRequestId = xRequestId, page = page, pageSize = pageSize)

        return request<Unit, kotlin.collections.List<RetentionExecution>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listRetentionExecutions
     *
     * @param id Retention ID.
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number. (optional)
     * @param pageSize The size of per page. (optional)
     * @return RequestConfig
     */
    fun listRetentionExecutionsRequestConfig(
        id: kotlin.Long,
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/retentions/{id}/executions".replace("{" + "id" + "}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get Retention tasks
     * Get Retention tasks, each repository as a task.
     * @param id Retention ID.
     * @param eid Retention execution ID.
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number. (optional)
     * @param pageSize The size of per page. (optional)
     * @return kotlin.collections.List<RetentionExecutionTask>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listRetentionTasks(
        id: kotlin.Long,
        eid: kotlin.Long,
        xRequestId: kotlin.String? = null,
        page: kotlin.Long? = null,
        pageSize: kotlin.Long? = null
    ): kotlin.collections.List<RetentionExecutionTask> {
        val localVarResponse = listRetentionTasksWithHttpInfo(
            id = id,
            eid = eid,
            xRequestId = xRequestId,
            page = page,
            pageSize = pageSize
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<RetentionExecutionTask>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get Retention tasks
     * Get Retention tasks, each repository as a task.
     * @param id Retention ID.
     * @param eid Retention execution ID.
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number. (optional)
     * @param pageSize The size of per page. (optional)
     * @return ApiResponse<kotlin.collections.List<RetentionExecutionTask>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listRetentionTasksWithHttpInfo(
        id: kotlin.Long,
        eid: kotlin.Long,
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): ApiResponse<kotlin.collections.List<RetentionExecutionTask>?> {
        val localVariableConfig = listRetentionTasksRequestConfig(
            id = id,
            eid = eid,
            xRequestId = xRequestId,
            page = page,
            pageSize = pageSize
        )

        return request<Unit, kotlin.collections.List<RetentionExecutionTask>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listRetentionTasks
     *
     * @param id Retention ID.
     * @param eid Retention execution ID.
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number. (optional)
     * @param pageSize The size of per page. (optional)
     * @return RequestConfig
     */
    fun listRetentionTasksRequestConfig(
        id: kotlin.Long,
        eid: kotlin.Long,
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/retentions/{id}/executions/{eid}/tasks".replace("{" + "id" + "}", id.toString())
                .replace("{" + "eid" + "}", eid.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Stop a Retention execution
     * Stop a Retention execution, only support \&quot;stop\&quot; action now.
     * @param id Retention ID.
     * @param eid Retention execution ID.
     * @param body The action, only support \&quot;stop\&quot; now.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun operateRetentionExecution(
        id: kotlin.Long,
        eid: kotlin.Long,
        body: OperateRetentionExecutionRequest,
        xRequestId: kotlin.String? = null
    ): Unit {
        val localVarResponse =
            operateRetentionExecutionWithHttpInfo(id = id, eid = eid, body = body, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Stop a Retention execution
     * Stop a Retention execution, only support \&quot;stop\&quot; action now.
     * @param id Retention ID.
     * @param eid Retention execution ID.
     * @param body The action, only support \&quot;stop\&quot; now.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun operateRetentionExecutionWithHttpInfo(
        id: kotlin.Long,
        eid: kotlin.Long,
        body: OperateRetentionExecutionRequest,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig =
            operateRetentionExecutionRequestConfig(id = id, eid = eid, body = body, xRequestId = xRequestId)

        return request<OperateRetentionExecutionRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation operateRetentionExecution
     *
     * @param id Retention ID.
     * @param eid Retention execution ID.
     * @param body The action, only support \&quot;stop\&quot; now.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun operateRetentionExecutionRequestConfig(
        id: kotlin.Long,
        eid: kotlin.Long,
        body: OperateRetentionExecutionRequest,
        xRequestId: kotlin.String?
    ): RequestConfig<OperateRetentionExecutionRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/retentions/{id}/executions/{eid}".replace("{" + "id" + "}", id.toString())
                .replace("{" + "eid" + "}", eid.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Trigger a Retention Execution
     * Trigger a Retention Execution, if dry_run is True, nothing would be deleted actually.
     * @param id Retention ID.
     * @param body
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun triggerRetentionExecution(
        id: kotlin.Long,
        body: TriggerRetentionExecutionRequest,
        xRequestId: kotlin.String? = null
    ): Unit {
        val localVarResponse = triggerRetentionExecutionWithHttpInfo(id = id, body = body, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Trigger a Retention Execution
     * Trigger a Retention Execution, if dry_run is True, nothing would be deleted actually.
     * @param id Retention ID.
     * @param body
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun triggerRetentionExecutionWithHttpInfo(
        id: kotlin.Long,
        body: TriggerRetentionExecutionRequest,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = triggerRetentionExecutionRequestConfig(id = id, body = body, xRequestId = xRequestId)

        return request<TriggerRetentionExecutionRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation triggerRetentionExecution
     *
     * @param id Retention ID.
     * @param body
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun triggerRetentionExecutionRequestConfig(
        id: kotlin.Long,
        body: TriggerRetentionExecutionRequest,
        xRequestId: kotlin.String?
    ): RequestConfig<TriggerRetentionExecutionRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/retentions/{id}/executions".replace("{" + "id" + "}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update Retention Policy
     * Update Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project.
     * @param id Retention ID.
     * @param policy
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun updateRetention(id: kotlin.Long, policy: RetentionPolicy, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = updateRetentionWithHttpInfo(id = id, policy = policy, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Update Retention Policy
     * Update Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project.
     * @param id Retention ID.
     * @param policy
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun updateRetentionWithHttpInfo(
        id: kotlin.Long,
        policy: RetentionPolicy,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = updateRetentionRequestConfig(id = id, policy = policy, xRequestId = xRequestId)

        return request<RetentionPolicy, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateRetention
     *
     * @param id Retention ID.
     * @param policy
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun updateRetentionRequestConfig(
        id: kotlin.Long,
        policy: RetentionPolicy,
        xRequestId: kotlin.String?
    ): RequestConfig<RetentionPolicy> {
        val localVariableBody = policy
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/retentions/{id}".replace("{" + "id" + "}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
