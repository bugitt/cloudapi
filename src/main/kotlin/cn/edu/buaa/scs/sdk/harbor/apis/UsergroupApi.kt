/**
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cn.edu.buaa.scs.sdk.harbor.apis

import cn.edu.buaa.scs.sdk.harbor.infrastructure.*
import cn.edu.buaa.scs.sdk.harbor.models.UserGroup
import cn.edu.buaa.scs.sdk.harbor.models.UserGroupSearchItem
import okhttp3.OkHttpClient
import java.io.IOException

class UsergroupApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) :
    ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://localhost/api/v2.0")
        }
    }

    /**
     * Create user group
     * Create user group information
     * @param xRequestId An unique ID for the request (optional)
     * @param usergroup  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun createUserGroup(xRequestId: kotlin.String? = null, usergroup: UserGroup? = null): Unit {
        val localVarResponse = createUserGroupWithHttpInfo(xRequestId = xRequestId, usergroup = usergroup)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Create user group
     * Create user group information
     * @param xRequestId An unique ID for the request (optional)
     * @param usergroup  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun createUserGroupWithHttpInfo(xRequestId: kotlin.String?, usergroup: UserGroup?): ApiResponse<Unit?> {
        val localVariableConfig = createUserGroupRequestConfig(xRequestId = xRequestId, usergroup = usergroup)

        return request<UserGroup, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createUserGroup
     *
     * @param xRequestId An unique ID for the request (optional)
     * @param usergroup  (optional)
     * @return RequestConfig
     */
    fun createUserGroupRequestConfig(xRequestId: kotlin.String?, usergroup: UserGroup?): RequestConfig<UserGroup> {
        val localVariableBody = usergroup
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/usergroups",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete user group
     * Delete user group
     * @param groupId
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun deleteUserGroup(groupId: kotlin.Int, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = deleteUserGroupWithHttpInfo(groupId = groupId, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Delete user group
     * Delete user group
     * @param groupId
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteUserGroupWithHttpInfo(groupId: kotlin.Int, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = deleteUserGroupRequestConfig(groupId = groupId, xRequestId = xRequestId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteUserGroup
     *
     * @param groupId
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun deleteUserGroupRequestConfig(groupId: kotlin.Int, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/usergroups/{group_id}".replace("{" + "group_id" + "}", groupId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get user group information
     * Get user group information
     * @param groupId Group ID
     * @param xRequestId An unique ID for the request (optional)
     * @return UserGroup
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getUserGroup(groupId: kotlin.Long, xRequestId: kotlin.String? = null): UserGroup {
        val localVarResponse = getUserGroupWithHttpInfo(groupId = groupId, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserGroup
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get user group information
     * Get user group information
     * @param groupId Group ID
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<UserGroup?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserGroupWithHttpInfo(groupId: kotlin.Long, xRequestId: kotlin.String?): ApiResponse<UserGroup?> {
        val localVariableConfig = getUserGroupRequestConfig(groupId = groupId, xRequestId = xRequestId)

        return request<Unit, UserGroup>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserGroup
     *
     * @param groupId Group ID
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getUserGroupRequestConfig(groupId: kotlin.Long, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/usergroups/{group_id}".replace("{" + "group_id" + "}", groupId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get all user groups information
     * Get all user groups information, it is open for system admin
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param ldapGroupDn search with ldap group DN (optional)
     * @param groupName group name need to search, fuzzy matches (optional)
     * @return kotlin.collections.List<UserGroup>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listUserGroups(
        xRequestId: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10,
        ldapGroupDn: kotlin.String? = null,
        groupName: kotlin.String? = null
    ): kotlin.collections.List<UserGroup> {
        val localVarResponse = listUserGroupsWithHttpInfo(
            xRequestId = xRequestId,
            page = page,
            pageSize = pageSize,
            ldapGroupDn = ldapGroupDn,
            groupName = groupName
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<UserGroup>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get all user groups information
     * Get all user groups information, it is open for system admin
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param ldapGroupDn search with ldap group DN (optional)
     * @param groupName group name need to search, fuzzy matches (optional)
     * @return ApiResponse<kotlin.collections.List<UserGroup>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listUserGroupsWithHttpInfo(
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        ldapGroupDn: kotlin.String?,
        groupName: kotlin.String?
    ): ApiResponse<kotlin.collections.List<UserGroup>?> {
        val localVariableConfig = listUserGroupsRequestConfig(
            xRequestId = xRequestId,
            page = page,
            pageSize = pageSize,
            ldapGroupDn = ldapGroupDn,
            groupName = groupName
        )

        return request<Unit, kotlin.collections.List<UserGroup>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listUserGroups
     *
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param ldapGroupDn search with ldap group DN (optional)
     * @param groupName group name need to search, fuzzy matches (optional)
     * @return RequestConfig
     */
    fun listUserGroupsRequestConfig(
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        ldapGroupDn: kotlin.String?,
        groupName: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (ldapGroupDn != null) {
                    put("ldap_group_dn", listOf(ldapGroupDn.toString()))
                }
                if (groupName != null) {
                    put("group_name", listOf(groupName.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/usergroups",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Search groups by groupname
     * This endpoint is to search groups by group name.  It&#39;s open for all authenticated requests.
     * @param groupname Group name for filtering results.
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return kotlin.collections.List<UserGroupSearchItem>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun searchUserGroups(
        groupname: kotlin.String,
        xRequestId: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10
    ): kotlin.collections.List<UserGroupSearchItem> {
        val localVarResponse = searchUserGroupsWithHttpInfo(
            groupname = groupname,
            xRequestId = xRequestId,
            page = page,
            pageSize = pageSize
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<UserGroupSearchItem>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Search groups by groupname
     * This endpoint is to search groups by group name.  It&#39;s open for all authenticated requests.
     * @param groupname Group name for filtering results.
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return ApiResponse<kotlin.collections.List<UserGroupSearchItem>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchUserGroupsWithHttpInfo(
        groupname: kotlin.String,
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): ApiResponse<kotlin.collections.List<UserGroupSearchItem>?> {
        val localVariableConfig = searchUserGroupsRequestConfig(
            groupname = groupname,
            xRequestId = xRequestId,
            page = page,
            pageSize = pageSize
        )

        return request<Unit, kotlin.collections.List<UserGroupSearchItem>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchUserGroups
     *
     * @param groupname Group name for filtering results.
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return RequestConfig
     */
    fun searchUserGroupsRequestConfig(
        groupname: kotlin.String,
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                put("groupname", listOf(groupname.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/usergroups/search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update group information
     * Update user group information
     * @param groupId Group ID
     * @param xRequestId An unique ID for the request (optional)
     * @param usergroup  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun updateUserGroup(groupId: kotlin.Long, xRequestId: kotlin.String? = null, usergroup: UserGroup? = null): Unit {
        val localVarResponse =
            updateUserGroupWithHttpInfo(groupId = groupId, xRequestId = xRequestId, usergroup = usergroup)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Update group information
     * Update user group information
     * @param groupId Group ID
     * @param xRequestId An unique ID for the request (optional)
     * @param usergroup  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun updateUserGroupWithHttpInfo(
        groupId: kotlin.Long,
        xRequestId: kotlin.String?,
        usergroup: UserGroup?
    ): ApiResponse<Unit?> {
        val localVariableConfig =
            updateUserGroupRequestConfig(groupId = groupId, xRequestId = xRequestId, usergroup = usergroup)

        return request<UserGroup, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateUserGroup
     *
     * @param groupId Group ID
     * @param xRequestId An unique ID for the request (optional)
     * @param usergroup  (optional)
     * @return RequestConfig
     */
    fun updateUserGroupRequestConfig(
        groupId: kotlin.Long,
        xRequestId: kotlin.String?,
        usergroup: UserGroup?
    ): RequestConfig<UserGroup> {
        val localVariableBody = usergroup
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/usergroups/{group_id}".replace("{" + "group_id" + "}", groupId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
