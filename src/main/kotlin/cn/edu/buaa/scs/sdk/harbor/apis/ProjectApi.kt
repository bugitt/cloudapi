/**
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cn.edu.buaa.scs.sdk.harbor.apis

import cn.edu.buaa.scs.sdk.harbor.infrastructure.*
import cn.edu.buaa.scs.sdk.harbor.models.*
import okhttp3.OkHttpClient
import java.io.IOException

class ProjectApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) :
    ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://localhost/api/v2.0")
        }
    }

    /**
     * Create a new project.
     * This endpoint is for user to create a new project.
     * @param project New created project.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun createProject(project: ProjectReq, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = createProjectWithHttpInfo(project = project, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Create a new project.
     * This endpoint is for user to create a new project.
     * @param project New created project.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun createProjectWithHttpInfo(project: ProjectReq, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = createProjectRequestConfig(project = project, xRequestId = xRequestId)

        return request<ProjectReq, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createProject
     *
     * @param project New created project.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun createProjectRequestConfig(project: ProjectReq, xRequestId: kotlin.String?): RequestConfig<ProjectReq> {
        val localVariableBody = project
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/projects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete project by projectID
     * This endpoint is aimed to delete project by project ID.
     * @param projectId The ID of the project
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun deleteProject(projectId: kotlin.Long, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = deleteProjectWithHttpInfo(projectId = projectId, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Delete project by projectID
     * This endpoint is aimed to delete project by project ID.
     * @param projectId The ID of the project
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteProjectWithHttpInfo(projectId: kotlin.Long, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = deleteProjectRequestConfig(projectId = projectId, xRequestId = xRequestId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteProject
     *
     * @param projectId The ID of the project
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun deleteProjectRequestConfig(projectId: kotlin.Long, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/projects/{project_id}".replace("{" + "project_id" + "}", projectId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get recent logs of the projects
     * Get recent logs of the projects
     * @param projectName The name of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return kotlin.collections.List<AuditLog>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getLogs(
        projectName: kotlin.String,
        xRequestId: kotlin.String? = null,
        q: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10
    ): kotlin.collections.List<AuditLog> {
        val localVarResponse = getLogsWithHttpInfo(
            projectName = projectName,
            xRequestId = xRequestId,
            q = q,
            page = page,
            pageSize = pageSize
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<AuditLog>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get recent logs of the projects
     * Get recent logs of the projects
     * @param projectName The name of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return ApiResponse<kotlin.collections.List<AuditLog>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getLogsWithHttpInfo(
        projectName: kotlin.String,
        xRequestId: kotlin.String?,
        q: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): ApiResponse<kotlin.collections.List<AuditLog>?> {
        val localVariableConfig = getLogsRequestConfig(
            projectName = projectName,
            xRequestId = xRequestId,
            q = q,
            page = page,
            pageSize = pageSize
        )

        return request<Unit, kotlin.collections.List<AuditLog>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getLogs
     *
     * @param projectName The name of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return RequestConfig
     */
    fun getLogsRequestConfig(
        projectName: kotlin.String,
        xRequestId: kotlin.String?,
        q: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name}/logs".replace("{" + "project_name" + "}", projectName.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Return specific project detail information
     * This endpoint returns specific project information by project ID.
     * @param projectId The ID of the project
     * @param xRequestId An unique ID for the request (optional)
     * @return Project
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getProject(projectId: kotlin.Long, xRequestId: kotlin.String? = null): Project {
        val localVarResponse = getProjectWithHttpInfo(projectId = projectId, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Project
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Return specific project detail information
     * This endpoint returns specific project information by project ID.
     * @param projectId The ID of the project
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Project?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getProjectWithHttpInfo(projectId: kotlin.Long, xRequestId: kotlin.String?): ApiResponse<Project?> {
        val localVariableConfig = getProjectRequestConfig(projectId = projectId, xRequestId = xRequestId)

        return request<Unit, Project>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProject
     *
     * @param projectId The ID of the project
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getProjectRequestConfig(projectId: kotlin.Long, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_id}".replace("{" + "project_id" + "}", projectId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get the deletable status of the project
     * Get the deletable status of the project
     * @param projectId The ID of the project
     * @param xRequestId An unique ID for the request (optional)
     * @return ProjectDeletable
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getProjectDeletable(projectId: kotlin.Long, xRequestId: kotlin.String? = null): ProjectDeletable {
        val localVarResponse = getProjectDeletableWithHttpInfo(projectId = projectId, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProjectDeletable
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get the deletable status of the project
     * Get the deletable status of the project
     * @param projectId The ID of the project
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<ProjectDeletable?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getProjectDeletableWithHttpInfo(
        projectId: kotlin.Long,
        xRequestId: kotlin.String?
    ): ApiResponse<ProjectDeletable?> {
        val localVariableConfig = getProjectDeletableRequestConfig(projectId = projectId, xRequestId = xRequestId)

        return request<Unit, ProjectDeletable>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProjectDeletable
     *
     * @param projectId The ID of the project
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getProjectDeletableRequestConfig(projectId: kotlin.Long, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_id}/_deletable".replace("{" + "project_id" + "}", projectId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get summary of the project.
     * Get summary of the project.
     * @param projectId The ID of the project
     * @param xRequestId An unique ID for the request (optional)
     * @return ProjectSummary
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getProjectSummary(projectId: kotlin.Long, xRequestId: kotlin.String? = null): ProjectSummary {
        val localVarResponse = getProjectSummaryWithHttpInfo(projectId = projectId, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProjectSummary
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get summary of the project.
     * Get summary of the project.
     * @param projectId The ID of the project
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<ProjectSummary?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getProjectSummaryWithHttpInfo(
        projectId: kotlin.Long,
        xRequestId: kotlin.String?
    ): ApiResponse<ProjectSummary?> {
        val localVariableConfig = getProjectSummaryRequestConfig(projectId = projectId, xRequestId = xRequestId)

        return request<Unit, ProjectSummary>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProjectSummary
     *
     * @param projectId The ID of the project
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getProjectSummaryRequestConfig(projectId: kotlin.Long, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_id}/summary".replace("{" + "project_id" + "}", projectId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Check if the project name user provided already exists.
     * This endpoint is used to check if the project name provided already exist.
     * @param projectName Project name for checking exists.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun headProject(projectName: kotlin.String, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = headProjectWithHttpInfo(projectName = projectName, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Check if the project name user provided already exists.
     * This endpoint is used to check if the project name provided already exist.
     * @param projectName Project name for checking exists.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun headProjectWithHttpInfo(projectName: kotlin.String, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = headProjectRequestConfig(projectName = projectName, xRequestId = xRequestId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation headProject
     *
     * @param projectName Project name for checking exists.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun headProjectRequestConfig(projectName: kotlin.String, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("project_name", listOf(projectName.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.HEAD,
            path = "/projects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List projects
     * This endpoint returns projects created by Harbor.
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param name The name of project. (optional)
     * @param `public` The project is public or private. (optional)
     * @param owner The name of project owner. (optional)
     * @return kotlin.collections.List<Project>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listProjects(
        xRequestId: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10,
        name: kotlin.String? = null,
        `public`: kotlin.Boolean? = null,
        owner: kotlin.String? = null
    ): kotlin.collections.List<Project> {
        val localVarResponse = listProjectsWithHttpInfo(
            xRequestId = xRequestId,
            page = page,
            pageSize = pageSize,
            name = name,
            `public` = `public`,
            owner = owner
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Project>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * List projects
     * This endpoint returns projects created by Harbor.
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param name The name of project. (optional)
     * @param `public` The project is public or private. (optional)
     * @param owner The name of project owner. (optional)
     * @return ApiResponse<kotlin.collections.List<Project>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listProjectsWithHttpInfo(
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        name: kotlin.String?,
        `public`: kotlin.Boolean?,
        owner: kotlin.String?
    ): ApiResponse<kotlin.collections.List<Project>?> {
        val localVariableConfig = listProjectsRequestConfig(
            xRequestId = xRequestId,
            page = page,
            pageSize = pageSize,
            name = name,
            `public` = `public`,
            owner = owner
        )

        return request<Unit, kotlin.collections.List<Project>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listProjects
     *
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param name The name of project. (optional)
     * @param `public` The project is public or private. (optional)
     * @param owner The name of project owner. (optional)
     * @return RequestConfig
     */
    fun listProjectsRequestConfig(
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        name: kotlin.String?,
        `public`: kotlin.Boolean?,
        owner: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (name != null) {
                    put("name", listOf(name.toString()))
                }
                if (`public` != null) {
                    put("public", listOf(`public`.toString()))
                }
                if (owner != null) {
                    put("owner", listOf(owner.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update properties for a selected project.
     * This endpoint is aimed to update the properties of a project.
     * @param projectId The ID of the project
     * @param project Updates of project.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun updateProject(projectId: kotlin.Long, project: ProjectReq, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse =
            updateProjectWithHttpInfo(projectId = projectId, project = project, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Update properties for a selected project.
     * This endpoint is aimed to update the properties of a project.
     * @param projectId The ID of the project
     * @param project Updates of project.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun updateProjectWithHttpInfo(
        projectId: kotlin.Long,
        project: ProjectReq,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig =
            updateProjectRequestConfig(projectId = projectId, project = project, xRequestId = xRequestId)

        return request<ProjectReq, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateProject
     *
     * @param projectId The ID of the project
     * @param project Updates of project.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun updateProjectRequestConfig(
        projectId: kotlin.Long,
        project: ProjectReq,
        xRequestId: kotlin.String?
    ): RequestConfig<ProjectReq> {
        val localVariableBody = project
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/projects/{project_id}".replace("{" + "project_id" + "}", projectId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
