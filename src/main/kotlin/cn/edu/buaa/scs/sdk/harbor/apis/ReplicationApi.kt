/**
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cn.edu.buaa.scs.sdk.harbor.apis

import cn.edu.buaa.scs.sdk.harbor.infrastructure.*
import cn.edu.buaa.scs.sdk.harbor.models.ReplicationExecution
import cn.edu.buaa.scs.sdk.harbor.models.ReplicationPolicy
import cn.edu.buaa.scs.sdk.harbor.models.ReplicationTask
import cn.edu.buaa.scs.sdk.harbor.models.StartReplicationExecution
import okhttp3.OkHttpClient
import java.io.IOException

class ReplicationApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) :
    ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://localhost/api/v2.0")
        }
    }

    /**
     * Create a replication policy
     * Create a replication policy
     * @param policy The replication policy
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun createReplicationPolicy(policy: ReplicationPolicy, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = createReplicationPolicyWithHttpInfo(policy = policy, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Create a replication policy
     * Create a replication policy
     * @param policy The replication policy
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun createReplicationPolicyWithHttpInfo(policy: ReplicationPolicy, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = createReplicationPolicyRequestConfig(policy = policy, xRequestId = xRequestId)

        return request<ReplicationPolicy, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createReplicationPolicy
     *
     * @param policy The replication policy
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun createReplicationPolicyRequestConfig(
        policy: ReplicationPolicy,
        xRequestId: kotlin.String?
    ): RequestConfig<ReplicationPolicy> {
        val localVariableBody = policy
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/replication/policies",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete the specific replication policy
     * Delete the specific replication policy
     * @param id Replication policy ID
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun deleteReplicationPolicy(id: kotlin.Long, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = deleteReplicationPolicyWithHttpInfo(id = id, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Delete the specific replication policy
     * Delete the specific replication policy
     * @param id Replication policy ID
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteReplicationPolicyWithHttpInfo(id: kotlin.Long, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = deleteReplicationPolicyRequestConfig(id = id, xRequestId = xRequestId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteReplicationPolicy
     *
     * @param id Replication policy ID
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun deleteReplicationPolicyRequestConfig(id: kotlin.Long, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/replication/policies/{id}".replace("{" + "id" + "}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get the specific replication execution
     * Get the replication execution specified by ID
     * @param id The ID of the execution.
     * @param xRequestId An unique ID for the request (optional)
     * @return ReplicationExecution
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getReplicationExecution(id: kotlin.Long, xRequestId: kotlin.String? = null): ReplicationExecution {
        val localVarResponse = getReplicationExecutionWithHttpInfo(id = id, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReplicationExecution
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get the specific replication execution
     * Get the replication execution specified by ID
     * @param id The ID of the execution.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<ReplicationExecution?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getReplicationExecutionWithHttpInfo(
        id: kotlin.Long,
        xRequestId: kotlin.String?
    ): ApiResponse<ReplicationExecution?> {
        val localVariableConfig = getReplicationExecutionRequestConfig(id = id, xRequestId = xRequestId)

        return request<Unit, ReplicationExecution>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getReplicationExecution
     *
     * @param id The ID of the execution.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getReplicationExecutionRequestConfig(id: kotlin.Long, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/replication/executions/{id}".replace("{" + "id" + "}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get the log of the specific replication task
     * Get the log of the specific replication task
     * @param id The ID of the execution that the tasks belongs to.
     * @param taskId The ID of the task.
     * @param xRequestId An unique ID for the request (optional)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getReplicationLog(id: kotlin.Long, taskId: kotlin.Long, xRequestId: kotlin.String? = null): kotlin.String {
        val localVarResponse = getReplicationLogWithHttpInfo(id = id, taskId = taskId, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get the log of the specific replication task
     * Get the log of the specific replication task
     * @param id The ID of the execution that the tasks belongs to.
     * @param taskId The ID of the task.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getReplicationLogWithHttpInfo(
        id: kotlin.Long,
        taskId: kotlin.Long,
        xRequestId: kotlin.String?
    ): ApiResponse<kotlin.String?> {
        val localVariableConfig = getReplicationLogRequestConfig(id = id, taskId = taskId, xRequestId = xRequestId)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getReplicationLog
     *
     * @param id The ID of the execution that the tasks belongs to.
     * @param taskId The ID of the task.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getReplicationLogRequestConfig(
        id: kotlin.Long,
        taskId: kotlin.Long,
        xRequestId: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/replication/executions/{id}/tasks/{task_id}/log".replace("{" + "id" + "}", id.toString())
                .replace("{" + "task_id" + "}", taskId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get the specific replication policy
     * Get the specific replication policy
     * @param id Policy ID
     * @param xRequestId An unique ID for the request (optional)
     * @return ReplicationPolicy
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getReplicationPolicy(id: kotlin.Long, xRequestId: kotlin.String? = null): ReplicationPolicy {
        val localVarResponse = getReplicationPolicyWithHttpInfo(id = id, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReplicationPolicy
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get the specific replication policy
     * Get the specific replication policy
     * @param id Policy ID
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<ReplicationPolicy?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getReplicationPolicyWithHttpInfo(id: kotlin.Long, xRequestId: kotlin.String?): ApiResponse<ReplicationPolicy?> {
        val localVariableConfig = getReplicationPolicyRequestConfig(id = id, xRequestId = xRequestId)

        return request<Unit, ReplicationPolicy>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getReplicationPolicy
     *
     * @param id Policy ID
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getReplicationPolicyRequestConfig(id: kotlin.Long, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/replication/policies/{id}".replace("{" + "id" + "}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List replication executions
     * List replication executions
     * @param xRequestId An unique ID for the request (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param policyId The ID of the policy that the executions belong to. (optional)
     * @param status The execution status. (optional)
     * @param trigger The trigger mode. (optional)
     * @return kotlin.collections.List<ReplicationExecution>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listReplicationExecutions(
        xRequestId: kotlin.String? = null,
        sort: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10,
        policyId: kotlin.Int? = null,
        status: kotlin.String? = null,
        trigger: kotlin.String? = null
    ): kotlin.collections.List<ReplicationExecution> {
        val localVarResponse = listReplicationExecutionsWithHttpInfo(
            xRequestId = xRequestId,
            sort = sort,
            page = page,
            pageSize = pageSize,
            policyId = policyId,
            status = status,
            trigger = trigger
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<ReplicationExecution>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * List replication executions
     * List replication executions
     * @param xRequestId An unique ID for the request (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param policyId The ID of the policy that the executions belong to. (optional)
     * @param status The execution status. (optional)
     * @param trigger The trigger mode. (optional)
     * @return ApiResponse<kotlin.collections.List<ReplicationExecution>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listReplicationExecutionsWithHttpInfo(
        xRequestId: kotlin.String?,
        sort: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        policyId: kotlin.Int?,
        status: kotlin.String?,
        trigger: kotlin.String?
    ): ApiResponse<kotlin.collections.List<ReplicationExecution>?> {
        val localVariableConfig = listReplicationExecutionsRequestConfig(
            xRequestId = xRequestId,
            sort = sort,
            page = page,
            pageSize = pageSize,
            policyId = policyId,
            status = status,
            trigger = trigger
        )

        return request<Unit, kotlin.collections.List<ReplicationExecution>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listReplicationExecutions
     *
     * @param xRequestId An unique ID for the request (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param policyId The ID of the policy that the executions belong to. (optional)
     * @param status The execution status. (optional)
     * @param trigger The trigger mode. (optional)
     * @return RequestConfig
     */
    fun listReplicationExecutionsRequestConfig(
        xRequestId: kotlin.String?,
        sort: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        policyId: kotlin.Int?,
        status: kotlin.String?,
        trigger: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (policyId != null) {
                    put("policy_id", listOf(policyId.toString()))
                }
                if (status != null) {
                    put("status", listOf(status.toString()))
                }
                if (trigger != null) {
                    put("trigger", listOf(trigger.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/replication/executions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List replication policies
     * List replication policies
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param name Deprecated, use \&quot;query\&quot; instead. The policy name. (optional)
     * @return kotlin.collections.List<ReplicationPolicy>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listReplicationPolicies(
        xRequestId: kotlin.String? = null,
        q: kotlin.String? = null,
        sort: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10,
        name: kotlin.String? = null
    ): kotlin.collections.List<ReplicationPolicy> {
        val localVarResponse = listReplicationPoliciesWithHttpInfo(
            xRequestId = xRequestId,
            q = q,
            sort = sort,
            page = page,
            pageSize = pageSize,
            name = name
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<ReplicationPolicy>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * List replication policies
     * List replication policies
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param name Deprecated, use \&quot;query\&quot; instead. The policy name. (optional)
     * @return ApiResponse<kotlin.collections.List<ReplicationPolicy>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listReplicationPoliciesWithHttpInfo(
        xRequestId: kotlin.String?,
        q: kotlin.String?,
        sort: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        name: kotlin.String?
    ): ApiResponse<kotlin.collections.List<ReplicationPolicy>?> {
        val localVariableConfig = listReplicationPoliciesRequestConfig(
            xRequestId = xRequestId,
            q = q,
            sort = sort,
            page = page,
            pageSize = pageSize,
            name = name
        )

        return request<Unit, kotlin.collections.List<ReplicationPolicy>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listReplicationPolicies
     *
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param name Deprecated, use \&quot;query\&quot; instead. The policy name. (optional)
     * @return RequestConfig
     */
    fun listReplicationPoliciesRequestConfig(
        xRequestId: kotlin.String?,
        q: kotlin.String?,
        sort: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        name: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (name != null) {
                    put("name", listOf(name.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/replication/policies",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List replication tasks for a specific execution
     * List replication tasks for a specific execution
     * @param id The ID of the execution that the tasks belongs to.
     * @param xRequestId An unique ID for the request (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param status The task status. (optional)
     * @param resourceType The resource type. (optional)
     * @return kotlin.collections.List<ReplicationTask>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listReplicationTasks(
        id: kotlin.Long,
        xRequestId: kotlin.String? = null,
        sort: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10,
        status: kotlin.String? = null,
        resourceType: kotlin.String? = null
    ): kotlin.collections.List<ReplicationTask> {
        val localVarResponse = listReplicationTasksWithHttpInfo(
            id = id,
            xRequestId = xRequestId,
            sort = sort,
            page = page,
            pageSize = pageSize,
            status = status,
            resourceType = resourceType
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<ReplicationTask>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * List replication tasks for a specific execution
     * List replication tasks for a specific execution
     * @param id The ID of the execution that the tasks belongs to.
     * @param xRequestId An unique ID for the request (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param status The task status. (optional)
     * @param resourceType The resource type. (optional)
     * @return ApiResponse<kotlin.collections.List<ReplicationTask>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listReplicationTasksWithHttpInfo(
        id: kotlin.Long,
        xRequestId: kotlin.String?,
        sort: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        status: kotlin.String?,
        resourceType: kotlin.String?
    ): ApiResponse<kotlin.collections.List<ReplicationTask>?> {
        val localVariableConfig = listReplicationTasksRequestConfig(
            id = id,
            xRequestId = xRequestId,
            sort = sort,
            page = page,
            pageSize = pageSize,
            status = status,
            resourceType = resourceType
        )

        return request<Unit, kotlin.collections.List<ReplicationTask>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listReplicationTasks
     *
     * @param id The ID of the execution that the tasks belongs to.
     * @param xRequestId An unique ID for the request (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param status The task status. (optional)
     * @param resourceType The resource type. (optional)
     * @return RequestConfig
     */
    fun listReplicationTasksRequestConfig(
        id: kotlin.Long,
        xRequestId: kotlin.String?,
        sort: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        status: kotlin.String?,
        resourceType: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (status != null) {
                    put("status", listOf(status.toString()))
                }
                if (resourceType != null) {
                    put("resource_type", listOf(resourceType.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/replication/executions/{id}/tasks".replace("{" + "id" + "}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Start one replication execution
     * Start one replication execution according to the policy
     * @param execution The ID of policy that the execution belongs to
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun startReplication(execution: StartReplicationExecution, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = startReplicationWithHttpInfo(execution = execution, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Start one replication execution
     * Start one replication execution according to the policy
     * @param execution The ID of policy that the execution belongs to
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun startReplicationWithHttpInfo(
        execution: StartReplicationExecution,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = startReplicationRequestConfig(execution = execution, xRequestId = xRequestId)

        return request<StartReplicationExecution, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation startReplication
     *
     * @param execution The ID of policy that the execution belongs to
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun startReplicationRequestConfig(
        execution: StartReplicationExecution,
        xRequestId: kotlin.String?
    ): RequestConfig<StartReplicationExecution> {
        val localVariableBody = execution
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/replication/executions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Stop the specific replication execution
     * Stop the replication execution specified by ID
     * @param id The ID of the execution.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun stopReplication(id: kotlin.Long, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = stopReplicationWithHttpInfo(id = id, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Stop the specific replication execution
     * Stop the replication execution specified by ID
     * @param id The ID of the execution.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun stopReplicationWithHttpInfo(id: kotlin.Long, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = stopReplicationRequestConfig(id = id, xRequestId = xRequestId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation stopReplication
     *
     * @param id The ID of the execution.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun stopReplicationRequestConfig(id: kotlin.Long, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/replication/executions/{id}".replace("{" + "id" + "}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update the replication policy
     * Update the replication policy
     * @param id The policy ID
     * @param policy The replication policy
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun updateReplicationPolicy(id: kotlin.Long, policy: ReplicationPolicy, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = updateReplicationPolicyWithHttpInfo(id = id, policy = policy, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Update the replication policy
     * Update the replication policy
     * @param id The policy ID
     * @param policy The replication policy
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun updateReplicationPolicyWithHttpInfo(
        id: kotlin.Long,
        policy: ReplicationPolicy,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig =
            updateReplicationPolicyRequestConfig(id = id, policy = policy, xRequestId = xRequestId)

        return request<ReplicationPolicy, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateReplicationPolicy
     *
     * @param id The policy ID
     * @param policy The replication policy
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun updateReplicationPolicyRequestConfig(
        id: kotlin.Long,
        policy: ReplicationPolicy,
        xRequestId: kotlin.String?
    ): RequestConfig<ReplicationPolicy> {
        val localVariableBody = policy
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/replication/policies/{id}".replace("{" + "id" + "}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
