/**
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cn.edu.buaa.scs.sdk.harbor.apis

import cn.edu.buaa.scs.sdk.harbor.infrastructure.*
import cn.edu.buaa.scs.sdk.harbor.models.*
import okhttp3.OkHttpClient
import java.io.IOException

class LdapApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) :
    ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://localhost/api/v2.0")
        }
    }

    /**
     * Import selected available ldap users.
     * This endpoint adds the selected available ldap users to harbor based on related configuration parameters from the system. System will try to guess the user email address and realname, add to harbor user information. If have errors when import user, will return the list of importing failed uid and the failed reason.
     * @param uidList The uid listed for importing. This list will check users validity of ldap service based on configuration from the system.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun importLdapUser(uidList: LdapImportUsers, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = importLdapUserWithHttpInfo(uidList = uidList, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Import selected available ldap users.
     * This endpoint adds the selected available ldap users to harbor based on related configuration parameters from the system. System will try to guess the user email address and realname, add to harbor user information. If have errors when import user, will return the list of importing failed uid and the failed reason.
     * @param uidList The uid listed for importing. This list will check users validity of ldap service based on configuration from the system.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun importLdapUserWithHttpInfo(uidList: LdapImportUsers, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = importLdapUserRequestConfig(uidList = uidList, xRequestId = xRequestId)

        return request<LdapImportUsers, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation importLdapUser
     *
     * @param uidList The uid listed for importing. This list will check users validity of ldap service based on configuration from the system.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun importLdapUserRequestConfig(
        uidList: LdapImportUsers,
        xRequestId: kotlin.String?
    ): RequestConfig<LdapImportUsers> {
        val localVariableBody = uidList
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/ldap/users/import",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Ping available ldap service.
     * This endpoint ping the available ldap service for test related configuration parameters.
     * @param xRequestId An unique ID for the request (optional)
     * @param ldapconf ldap configuration. support input ldap service configuration. If it is a empty request, will load current configuration from the system. (optional)
     * @return LdapPingResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun pingLdap(xRequestId: kotlin.String? = null, ldapconf: LdapConf? = null): LdapPingResult {
        val localVarResponse = pingLdapWithHttpInfo(xRequestId = xRequestId, ldapconf = ldapconf)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as LdapPingResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Ping available ldap service.
     * This endpoint ping the available ldap service for test related configuration parameters.
     * @param xRequestId An unique ID for the request (optional)
     * @param ldapconf ldap configuration. support input ldap service configuration. If it is a empty request, will load current configuration from the system. (optional)
     * @return ApiResponse<LdapPingResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun pingLdapWithHttpInfo(xRequestId: kotlin.String?, ldapconf: LdapConf?): ApiResponse<LdapPingResult?> {
        val localVariableConfig = pingLdapRequestConfig(xRequestId = xRequestId, ldapconf = ldapconf)

        return request<LdapConf, LdapPingResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation pingLdap
     *
     * @param xRequestId An unique ID for the request (optional)
     * @param ldapconf ldap configuration. support input ldap service configuration. If it is a empty request, will load current configuration from the system. (optional)
     * @return RequestConfig
     */
    fun pingLdapRequestConfig(xRequestId: kotlin.String?, ldapconf: LdapConf?): RequestConfig<LdapConf> {
        val localVariableBody = ldapconf
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/ldap/ping",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Search available ldap groups.
     * This endpoint searches the available ldap groups based on related configuration parameters. support to search by groupname or groupdn.
     * @param xRequestId An unique ID for the request (optional)
     * @param groupname Ldap group name (optional)
     * @param groupdn The LDAP group DN (optional)
     * @return kotlin.collections.List<UserGroup>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun searchLdapGroup(
        xRequestId: kotlin.String? = null,
        groupname: kotlin.String? = null,
        groupdn: kotlin.String? = null
    ): kotlin.collections.List<UserGroup> {
        val localVarResponse =
            searchLdapGroupWithHttpInfo(xRequestId = xRequestId, groupname = groupname, groupdn = groupdn)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<UserGroup>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Search available ldap groups.
     * This endpoint searches the available ldap groups based on related configuration parameters. support to search by groupname or groupdn.
     * @param xRequestId An unique ID for the request (optional)
     * @param groupname Ldap group name (optional)
     * @param groupdn The LDAP group DN (optional)
     * @return ApiResponse<kotlin.collections.List<UserGroup>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchLdapGroupWithHttpInfo(
        xRequestId: kotlin.String?,
        groupname: kotlin.String?,
        groupdn: kotlin.String?
    ): ApiResponse<kotlin.collections.List<UserGroup>?> {
        val localVariableConfig =
            searchLdapGroupRequestConfig(xRequestId = xRequestId, groupname = groupname, groupdn = groupdn)

        return request<Unit, kotlin.collections.List<UserGroup>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchLdapGroup
     *
     * @param xRequestId An unique ID for the request (optional)
     * @param groupname Ldap group name (optional)
     * @param groupdn The LDAP group DN (optional)
     * @return RequestConfig
     */
    fun searchLdapGroupRequestConfig(
        xRequestId: kotlin.String?,
        groupname: kotlin.String?,
        groupdn: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (groupname != null) {
                    put("groupname", listOf(groupname.toString()))
                }
                if (groupdn != null) {
                    put("groupdn", listOf(groupdn.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ldap/groups/search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Search available ldap users.
     * This endpoint searches the available ldap users based on related configuration parameters. Support searched by input ladp configuration, load configuration from the system and specific filter.
     * @param xRequestId An unique ID for the request (optional)
     * @param username Registered user ID (optional)
     * @return kotlin.collections.List<LdapUser>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun searchLdapUser(
        xRequestId: kotlin.String? = null,
        username: kotlin.String? = null
    ): kotlin.collections.List<LdapUser> {
        val localVarResponse = searchLdapUserWithHttpInfo(xRequestId = xRequestId, username = username)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<LdapUser>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Search available ldap users.
     * This endpoint searches the available ldap users based on related configuration parameters. Support searched by input ladp configuration, load configuration from the system and specific filter.
     * @param xRequestId An unique ID for the request (optional)
     * @param username Registered user ID (optional)
     * @return ApiResponse<kotlin.collections.List<LdapUser>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchLdapUserWithHttpInfo(
        xRequestId: kotlin.String?,
        username: kotlin.String?
    ): ApiResponse<kotlin.collections.List<LdapUser>?> {
        val localVariableConfig = searchLdapUserRequestConfig(xRequestId = xRequestId, username = username)

        return request<Unit, kotlin.collections.List<LdapUser>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchLdapUser
     *
     * @param xRequestId An unique ID for the request (optional)
     * @param username Registered user ID (optional)
     * @return RequestConfig
     */
    fun searchLdapUserRequestConfig(xRequestId: kotlin.String?, username: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (username != null) {
                    put("username", listOf(username.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ldap/users/search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
