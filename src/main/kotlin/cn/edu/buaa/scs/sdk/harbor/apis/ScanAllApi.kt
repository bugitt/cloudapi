/**
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cn.edu.buaa.scs.sdk.harbor.apis

import cn.edu.buaa.scs.sdk.harbor.infrastructure.*
import cn.edu.buaa.scs.sdk.harbor.models.Schedule
import cn.edu.buaa.scs.sdk.harbor.models.Stats
import okhttp3.OkHttpClient
import java.io.IOException

class ScanAllApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) :
    ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://localhost/api/v2.0")
        }
    }

    /**
     * Create a schedule or a manual trigger for the scan all job.
     * This endpoint is for creating a schedule or a manual trigger for the scan all job, which scans all of images in Harbor.
     * @param schedule Create a schedule or a manual trigger for the scan all job.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun createScanAllSchedule(schedule: Schedule, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = createScanAllScheduleWithHttpInfo(schedule = schedule, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Create a schedule or a manual trigger for the scan all job.
     * This endpoint is for creating a schedule or a manual trigger for the scan all job, which scans all of images in Harbor.
     * @param schedule Create a schedule or a manual trigger for the scan all job.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun createScanAllScheduleWithHttpInfo(schedule: Schedule, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = createScanAllScheduleRequestConfig(schedule = schedule, xRequestId = xRequestId)

        return request<Schedule, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createScanAllSchedule
     *
     * @param schedule Create a schedule or a manual trigger for the scan all job.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun createScanAllScheduleRequestConfig(schedule: Schedule, xRequestId: kotlin.String?): RequestConfig<Schedule> {
        val localVariableBody = schedule
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/system/scanAll/schedule",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get the metrics of the latest scan all process
     * Get the metrics of the latest scan all process
     * @param xRequestId An unique ID for the request (optional)
     * @return Stats
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getLatestScanAllMetrics(xRequestId: kotlin.String? = null): Stats {
        val localVarResponse = getLatestScanAllMetricsWithHttpInfo(xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Stats
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get the metrics of the latest scan all process
     * Get the metrics of the latest scan all process
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Stats?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getLatestScanAllMetricsWithHttpInfo(xRequestId: kotlin.String?): ApiResponse<Stats?> {
        val localVariableConfig = getLatestScanAllMetricsRequestConfig(xRequestId = xRequestId)

        return request<Unit, Stats>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getLatestScanAllMetrics
     *
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getLatestScanAllMetricsRequestConfig(xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/scans/all/metrics",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get the metrics of the latest scheduled scan all process
     * Get the metrics of the latest scheduled scan all process
     * @param xRequestId An unique ID for the request (optional)
     * @return Stats
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    @Deprecated(message = "This operation is deprecated.")
    fun getLatestScheduledScanAllMetrics(xRequestId: kotlin.String? = null): Stats {
        @Suppress("DEPRECATION")
        val localVarResponse = getLatestScheduledScanAllMetricsWithHttpInfo(xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Stats
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get the metrics of the latest scheduled scan all process
     * Get the metrics of the latest scheduled scan all process
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Stats?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun getLatestScheduledScanAllMetricsWithHttpInfo(xRequestId: kotlin.String?): ApiResponse<Stats?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = getLatestScheduledScanAllMetricsRequestConfig(xRequestId = xRequestId)

        return request<Unit, Stats>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getLatestScheduledScanAllMetrics
     *
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun getLatestScheduledScanAllMetricsRequestConfig(xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/scans/schedule/metrics",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get scan all&#39;s schedule.
     * This endpoint is for getting a schedule for the scan all job, which scans all of images in Harbor.
     * @param xRequestId An unique ID for the request (optional)
     * @return Schedule
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getScanAllSchedule(xRequestId: kotlin.String? = null): Schedule {
        val localVarResponse = getScanAllScheduleWithHttpInfo(xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Schedule
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get scan all&#39;s schedule.
     * This endpoint is for getting a schedule for the scan all job, which scans all of images in Harbor.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Schedule?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getScanAllScheduleWithHttpInfo(xRequestId: kotlin.String?): ApiResponse<Schedule?> {
        val localVariableConfig = getScanAllScheduleRequestConfig(xRequestId = xRequestId)

        return request<Unit, Schedule>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getScanAllSchedule
     *
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getScanAllScheduleRequestConfig(xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/system/scanAll/schedule",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Stop scanAll job execution
     * Stop scanAll job execution
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun stopScanAll(xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = stopScanAllWithHttpInfo(xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Stop scanAll job execution
     * Stop scanAll job execution
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun stopScanAllWithHttpInfo(xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = stopScanAllRequestConfig(xRequestId = xRequestId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation stopScanAll
     *
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun stopScanAllRequestConfig(xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/system/scanAll/stop",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update scan all&#39;s schedule.
     * This endpoint is for updating the schedule of scan all job, which scans all of images in Harbor.
     * @param schedule Updates the schedule of scan all job, which scans all of images in Harbor.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun updateScanAllSchedule(schedule: Schedule, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = updateScanAllScheduleWithHttpInfo(schedule = schedule, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Update scan all&#39;s schedule.
     * This endpoint is for updating the schedule of scan all job, which scans all of images in Harbor.
     * @param schedule Updates the schedule of scan all job, which scans all of images in Harbor.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun updateScanAllScheduleWithHttpInfo(schedule: Schedule, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = updateScanAllScheduleRequestConfig(schedule = schedule, xRequestId = xRequestId)

        return request<Schedule, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateScanAllSchedule
     *
     * @param schedule Updates the schedule of scan all job, which scans all of images in Harbor.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun updateScanAllScheduleRequestConfig(schedule: Schedule, xRequestId: kotlin.String?): RequestConfig<Schedule> {
        val localVariableBody = schedule
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/system/scanAll/schedule",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
