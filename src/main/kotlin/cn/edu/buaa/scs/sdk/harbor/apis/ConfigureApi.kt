/**
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cn.edu.buaa.scs.sdk.harbor.apis

import cn.edu.buaa.scs.sdk.harbor.infrastructure.*
import cn.edu.buaa.scs.sdk.harbor.models.Configurations
import cn.edu.buaa.scs.sdk.harbor.models.ConfigurationsResponse
import cn.edu.buaa.scs.sdk.harbor.models.InternalConfigurationValue
import okhttp3.OkHttpClient
import java.io.IOException

class ConfigureApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) :
    ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://localhost/api/v2.0")
        }
    }

    /**
     * Get system configurations.
     * This endpoint is for retrieving system configurations that only provides for admin user.
     * @param xRequestId An unique ID for the request (optional)
     * @return ConfigurationsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getConfigurations(xRequestId: kotlin.String? = null): ConfigurationsResponse {
        val localVarResponse = getConfigurationsWithHttpInfo(xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ConfigurationsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get system configurations.
     * This endpoint is for retrieving system configurations that only provides for admin user.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<ConfigurationsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getConfigurationsWithHttpInfo(xRequestId: kotlin.String?): ApiResponse<ConfigurationsResponse?> {
        val localVariableConfig = getConfigurationsRequestConfig(xRequestId = xRequestId)

        return request<Unit, ConfigurationsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getConfigurations
     *
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getConfigurationsRequestConfig(xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/configurations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get internal configurations.
     * This endpoint is for retrieving system configurations that only provides for internal api call.
     * @param xRequestId An unique ID for the request (optional)
     * @return kotlin.collections.Map<kotlin.String, InternalConfigurationValue>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getInternalconfig(xRequestId: kotlin.String? = null): kotlin.collections.Map<kotlin.String, InternalConfigurationValue> {
        val localVarResponse = getInternalconfigWithHttpInfo(xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.Map<kotlin.String, InternalConfigurationValue>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get internal configurations.
     * This endpoint is for retrieving system configurations that only provides for internal api call.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<kotlin.collections.Map<kotlin.String, InternalConfigurationValue>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getInternalconfigWithHttpInfo(xRequestId: kotlin.String?): ApiResponse<kotlin.collections.Map<kotlin.String, InternalConfigurationValue>?> {
        val localVariableConfig = getInternalconfigRequestConfig(xRequestId = xRequestId)

        return request<Unit, kotlin.collections.Map<kotlin.String, InternalConfigurationValue>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getInternalconfig
     *
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getInternalconfigRequestConfig(xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/internalconfig",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Modify system configurations.
     * This endpoint is for modifying system configurations that only provides for admin user.
     * @param configurations The configuration map can contain a subset of the attributes of the schema, which are to be updated.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun updateConfigurations(configurations: Configurations, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse =
            updateConfigurationsWithHttpInfo(configurations = configurations, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Modify system configurations.
     * This endpoint is for modifying system configurations that only provides for admin user.
     * @param configurations The configuration map can contain a subset of the attributes of the schema, which are to be updated.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun updateConfigurationsWithHttpInfo(
        configurations: Configurations,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig =
            updateConfigurationsRequestConfig(configurations = configurations, xRequestId = xRequestId)

        return request<Configurations, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateConfigurations
     *
     * @param configurations The configuration map can contain a subset of the attributes of the schema, which are to be updated.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun updateConfigurationsRequestConfig(
        configurations: Configurations,
        xRequestId: kotlin.String?
    ): RequestConfig<Configurations> {
        val localVariableBody = configurations
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/configurations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
