/**
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cn.edu.buaa.scs.sdk.harbor.apis

import cn.edu.buaa.scs.sdk.harbor.infrastructure.*
import cn.edu.buaa.scs.sdk.harbor.models.ProjectMember
import cn.edu.buaa.scs.sdk.harbor.models.ProjectMemberEntity
import cn.edu.buaa.scs.sdk.harbor.models.RoleRequest
import okhttp3.OkHttpClient
import java.io.IOException

class MemberApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) :
    ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://localhost/api/v2.0")
        }
    }

    /**
     * Create project member
     * Create project member relationship, the member can be one of the user_member and group_member,  The user_member need to specify user_id or username. If the user already exist in harbor DB, specify the user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member need to specify id or ldap_group_dn. If the group already exist in harbor DB. specify the user group&#39;s id,  If does not exist, it will SearchAndOnBoard the group.
     * @param projectNameOrId The name or id of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param projectMember  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun createProjectMember(
        projectNameOrId: kotlin.String,
        xRequestId: kotlin.String? = null,
        xIsResourceName: kotlin.Boolean? = false,
        projectMember: ProjectMember? = null
    ): Unit {
        val localVarResponse = createProjectMemberWithHttpInfo(
            projectNameOrId = projectNameOrId,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName,
            projectMember = projectMember
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Create project member
     * Create project member relationship, the member can be one of the user_member and group_member,  The user_member need to specify user_id or username. If the user already exist in harbor DB, specify the user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member need to specify id or ldap_group_dn. If the group already exist in harbor DB. specify the user group&#39;s id,  If does not exist, it will SearchAndOnBoard the group.
     * @param projectNameOrId The name or id of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param projectMember  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun createProjectMemberWithHttpInfo(
        projectNameOrId: kotlin.String,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?,
        projectMember: ProjectMember?
    ): ApiResponse<Unit?> {
        val localVariableConfig = createProjectMemberRequestConfig(
            projectNameOrId = projectNameOrId,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName,
            projectMember = projectMember
        )

        return request<ProjectMember, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createProjectMember
     *
     * @param projectNameOrId The name or id of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param projectMember  (optional)
     * @return RequestConfig
     */
    fun createProjectMemberRequestConfig(
        projectNameOrId: kotlin.String,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?,
        projectMember: ProjectMember?
    ): RequestConfig<ProjectMember> {
        val localVariableBody = projectMember
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        xIsResourceName?.apply { localVariableHeaders["X-Is-Resource-Name"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/projects/{project_name_or_id}/members".replace(
                "{" + "project_name_or_id" + "}",
                projectNameOrId.toString()
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete project member
     *
     * @param projectNameOrId The name or id of the project
     * @param mid Member ID.
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun deleteProjectMember(
        projectNameOrId: kotlin.String,
        mid: kotlin.Long,
        xRequestId: kotlin.String? = null,
        xIsResourceName: kotlin.Boolean? = false
    ): Unit {
        val localVarResponse = deleteProjectMemberWithHttpInfo(
            projectNameOrId = projectNameOrId,
            mid = mid,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Delete project member
     *
     * @param projectNameOrId The name or id of the project
     * @param mid Member ID.
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteProjectMemberWithHttpInfo(
        projectNameOrId: kotlin.String,
        mid: kotlin.Long,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?
    ): ApiResponse<Unit?> {
        val localVariableConfig = deleteProjectMemberRequestConfig(
            projectNameOrId = projectNameOrId,
            mid = mid,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName
        )

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteProjectMember
     *
     * @param projectNameOrId The name or id of the project
     * @param mid Member ID.
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return RequestConfig
     */
    fun deleteProjectMemberRequestConfig(
        projectNameOrId: kotlin.String,
        mid: kotlin.Long,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        xIsResourceName?.apply { localVariableHeaders["X-Is-Resource-Name"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/projects/{project_name_or_id}/members/{mid}".replace(
                "{" + "project_name_or_id" + "}",
                projectNameOrId.toString()
            ).replace("{" + "mid" + "}", mid.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get the project member information
     * Get the project member information
     * @param projectNameOrId The name or id of the project
     * @param mid The member ID
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ProjectMemberEntity
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getProjectMember(
        projectNameOrId: kotlin.String,
        mid: kotlin.Long,
        xRequestId: kotlin.String? = null,
        xIsResourceName: kotlin.Boolean? = false
    ): ProjectMemberEntity {
        val localVarResponse = getProjectMemberWithHttpInfo(
            projectNameOrId = projectNameOrId,
            mid = mid,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProjectMemberEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get the project member information
     * Get the project member information
     * @param projectNameOrId The name or id of the project
     * @param mid The member ID
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse<ProjectMemberEntity?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getProjectMemberWithHttpInfo(
        projectNameOrId: kotlin.String,
        mid: kotlin.Long,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?
    ): ApiResponse<ProjectMemberEntity?> {
        val localVariableConfig = getProjectMemberRequestConfig(
            projectNameOrId = projectNameOrId,
            mid = mid,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName
        )

        return request<Unit, ProjectMemberEntity>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProjectMember
     *
     * @param projectNameOrId The name or id of the project
     * @param mid The member ID
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return RequestConfig
     */
    fun getProjectMemberRequestConfig(
        projectNameOrId: kotlin.String,
        mid: kotlin.Long,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        xIsResourceName?.apply { localVariableHeaders["X-Is-Resource-Name"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name_or_id}/members/{mid}".replace(
                "{" + "project_name_or_id" + "}",
                projectNameOrId.toString()
            ).replace("{" + "mid" + "}", mid.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get all project member information
     * Get all project member information
     * @param projectNameOrId The name or id of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param entityname The entity name to search. (optional)
     * @return kotlin.collections.List<ProjectMemberEntity>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listProjectMembers(
        projectNameOrId: kotlin.String,
        xRequestId: kotlin.String? = null,
        xIsResourceName: kotlin.Boolean? = false,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10,
        entityname: kotlin.String? = null
    ): kotlin.collections.List<ProjectMemberEntity> {
        val localVarResponse = listProjectMembersWithHttpInfo(
            projectNameOrId = projectNameOrId,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName,
            page = page,
            pageSize = pageSize,
            entityname = entityname
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<ProjectMemberEntity>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get all project member information
     * Get all project member information
     * @param projectNameOrId The name or id of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param entityname The entity name to search. (optional)
     * @return ApiResponse<kotlin.collections.List<ProjectMemberEntity>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listProjectMembersWithHttpInfo(
        projectNameOrId: kotlin.String,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        entityname: kotlin.String?
    ): ApiResponse<kotlin.collections.List<ProjectMemberEntity>?> {
        val localVariableConfig = listProjectMembersRequestConfig(
            projectNameOrId = projectNameOrId,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName,
            page = page,
            pageSize = pageSize,
            entityname = entityname
        )

        return request<Unit, kotlin.collections.List<ProjectMemberEntity>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listProjectMembers
     *
     * @param projectNameOrId The name or id of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param entityname The entity name to search. (optional)
     * @return RequestConfig
     */
    fun listProjectMembersRequestConfig(
        projectNameOrId: kotlin.String,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?,
        entityname: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (entityname != null) {
                    put("entityname", listOf(entityname.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        xIsResourceName?.apply { localVariableHeaders["X-Is-Resource-Name"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name_or_id}/members".replace(
                "{" + "project_name_or_id" + "}",
                projectNameOrId.toString()
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update project member
     * Update project member relationship
     * @param projectNameOrId The name or id of the project
     * @param mid Member ID.
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param role  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun updateProjectMember(
        projectNameOrId: kotlin.String,
        mid: kotlin.Long,
        xRequestId: kotlin.String? = null,
        xIsResourceName: kotlin.Boolean? = false,
        role: RoleRequest? = null
    ): Unit {
        val localVarResponse = updateProjectMemberWithHttpInfo(
            projectNameOrId = projectNameOrId,
            mid = mid,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName,
            role = role
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Update project member
     * Update project member relationship
     * @param projectNameOrId The name or id of the project
     * @param mid Member ID.
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param role  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun updateProjectMemberWithHttpInfo(
        projectNameOrId: kotlin.String,
        mid: kotlin.Long,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?,
        role: RoleRequest?
    ): ApiResponse<Unit?> {
        val localVariableConfig = updateProjectMemberRequestConfig(
            projectNameOrId = projectNameOrId,
            mid = mid,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName,
            role = role
        )

        return request<RoleRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateProjectMember
     *
     * @param projectNameOrId The name or id of the project
     * @param mid Member ID.
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param role  (optional)
     * @return RequestConfig
     */
    fun updateProjectMemberRequestConfig(
        projectNameOrId: kotlin.String,
        mid: kotlin.Long,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?,
        role: RoleRequest?
    ): RequestConfig<RoleRequest> {
        val localVariableBody = role
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        xIsResourceName?.apply { localVariableHeaders["X-Is-Resource-Name"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/projects/{project_name_or_id}/members/{mid}".replace(
                "{" + "project_name_or_id" + "}",
                projectNameOrId.toString()
            ).replace("{" + "mid" + "}", mid.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
