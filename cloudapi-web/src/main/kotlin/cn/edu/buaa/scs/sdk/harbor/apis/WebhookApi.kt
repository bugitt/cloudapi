/**
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cn.edu.buaa.scs.sdk.harbor.apis

import cn.edu.buaa.scs.sdk.harbor.infrastructure.*
import cn.edu.buaa.scs.sdk.harbor.models.SupportedWebhookEventTypes
import cn.edu.buaa.scs.sdk.harbor.models.WebhookLastTrigger
import cn.edu.buaa.scs.sdk.harbor.models.WebhookPolicy
import okhttp3.OkHttpClient
import java.io.IOException

class WebhookApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) :
    ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://localhost/api/v2.0")
        }
    }

    /**
     * Create project webhook policy.
     * This endpoint create a webhook policy if the project does not have one.
     * @param projectNameOrId The name or id of the project
     * @param policy Properties \&quot;targets\&quot; and \&quot;event_types\&quot; needed.
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun createWebhookPolicyOfProject(
        projectNameOrId: kotlin.String,
        policy: WebhookPolicy,
        xRequestId: kotlin.String? = null,
        xIsResourceName: kotlin.Boolean? = false
    ): Unit {
        val localVarResponse = createWebhookPolicyOfProjectWithHttpInfo(
            projectNameOrId = projectNameOrId,
            policy = policy,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Create project webhook policy.
     * This endpoint create a webhook policy if the project does not have one.
     * @param projectNameOrId The name or id of the project
     * @param policy Properties \&quot;targets\&quot; and \&quot;event_types\&quot; needed.
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun createWebhookPolicyOfProjectWithHttpInfo(
        projectNameOrId: kotlin.String,
        policy: WebhookPolicy,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?
    ): ApiResponse<Unit?> {
        val localVariableConfig = createWebhookPolicyOfProjectRequestConfig(
            projectNameOrId = projectNameOrId,
            policy = policy,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName
        )

        return request<WebhookPolicy, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createWebhookPolicyOfProject
     *
     * @param projectNameOrId The name or id of the project
     * @param policy Properties \&quot;targets\&quot; and \&quot;event_types\&quot; needed.
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return RequestConfig
     */
    fun createWebhookPolicyOfProjectRequestConfig(
        projectNameOrId: kotlin.String,
        policy: WebhookPolicy,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?
    ): RequestConfig<WebhookPolicy> {
        val localVariableBody = policy
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        xIsResourceName?.apply { localVariableHeaders["X-Is-Resource-Name"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/projects/{project_name_or_id}/webhook/policies".replace(
                "{" + "project_name_or_id" + "}",
                projectNameOrId.toString()
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete webhook policy of a project
     * This endpoint is aimed to delete webhookpolicy of a project.
     * @param projectNameOrId The name or id of the project
     * @param webhookPolicyId The ID of the webhook policy
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun deleteWebhookPolicyOfProject(
        projectNameOrId: kotlin.String,
        webhookPolicyId: kotlin.Long,
        xRequestId: kotlin.String? = null,
        xIsResourceName: kotlin.Boolean? = false
    ): Unit {
        val localVarResponse = deleteWebhookPolicyOfProjectWithHttpInfo(
            projectNameOrId = projectNameOrId,
            webhookPolicyId = webhookPolicyId,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Delete webhook policy of a project
     * This endpoint is aimed to delete webhookpolicy of a project.
     * @param projectNameOrId The name or id of the project
     * @param webhookPolicyId The ID of the webhook policy
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteWebhookPolicyOfProjectWithHttpInfo(
        projectNameOrId: kotlin.String,
        webhookPolicyId: kotlin.Long,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?
    ): ApiResponse<Unit?> {
        val localVariableConfig = deleteWebhookPolicyOfProjectRequestConfig(
            projectNameOrId = projectNameOrId,
            webhookPolicyId = webhookPolicyId,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName
        )

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteWebhookPolicyOfProject
     *
     * @param projectNameOrId The name or id of the project
     * @param webhookPolicyId The ID of the webhook policy
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return RequestConfig
     */
    fun deleteWebhookPolicyOfProjectRequestConfig(
        projectNameOrId: kotlin.String,
        webhookPolicyId: kotlin.Long,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        xIsResourceName?.apply { localVariableHeaders["X-Is-Resource-Name"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}".replace(
                "{" + "project_name_or_id" + "}",
                projectNameOrId.toString()
            ).replace("{" + "webhook_policy_id" + "}", webhookPolicyId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get supported event types and notify types.
     * Get supportted event types and notify types.
     * @param projectNameOrId The name or id of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return SupportedWebhookEventTypes
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getSupportedEventTypes(
        projectNameOrId: kotlin.String,
        xRequestId: kotlin.String? = null,
        xIsResourceName: kotlin.Boolean? = false
    ): SupportedWebhookEventTypes {
        val localVarResponse = getSupportedEventTypesWithHttpInfo(
            projectNameOrId = projectNameOrId,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SupportedWebhookEventTypes
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get supported event types and notify types.
     * Get supportted event types and notify types.
     * @param projectNameOrId The name or id of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse<SupportedWebhookEventTypes?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSupportedEventTypesWithHttpInfo(
        projectNameOrId: kotlin.String,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?
    ): ApiResponse<SupportedWebhookEventTypes?> {
        val localVariableConfig = getSupportedEventTypesRequestConfig(
            projectNameOrId = projectNameOrId,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName
        )

        return request<Unit, SupportedWebhookEventTypes>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSupportedEventTypes
     *
     * @param projectNameOrId The name or id of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return RequestConfig
     */
    fun getSupportedEventTypesRequestConfig(
        projectNameOrId: kotlin.String,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        xIsResourceName?.apply { localVariableHeaders["X-Is-Resource-Name"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name_or_id}/webhook/events".replace(
                "{" + "project_name_or_id" + "}",
                projectNameOrId.toString()
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get project webhook policy
     * This endpoint returns specified webhook policy of a project.
     * @param projectNameOrId The name or id of the project
     * @param webhookPolicyId The ID of the webhook policy
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return WebhookPolicy
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getWebhookPolicyOfProject(
        projectNameOrId: kotlin.String,
        webhookPolicyId: kotlin.Long,
        xRequestId: kotlin.String? = null,
        xIsResourceName: kotlin.Boolean? = false
    ): WebhookPolicy {
        val localVarResponse = getWebhookPolicyOfProjectWithHttpInfo(
            projectNameOrId = projectNameOrId,
            webhookPolicyId = webhookPolicyId,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookPolicy
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get project webhook policy
     * This endpoint returns specified webhook policy of a project.
     * @param projectNameOrId The name or id of the project
     * @param webhookPolicyId The ID of the webhook policy
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse<WebhookPolicy?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getWebhookPolicyOfProjectWithHttpInfo(
        projectNameOrId: kotlin.String,
        webhookPolicyId: kotlin.Long,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?
    ): ApiResponse<WebhookPolicy?> {
        val localVariableConfig = getWebhookPolicyOfProjectRequestConfig(
            projectNameOrId = projectNameOrId,
            webhookPolicyId = webhookPolicyId,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName
        )

        return request<Unit, WebhookPolicy>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getWebhookPolicyOfProject
     *
     * @param projectNameOrId The name or id of the project
     * @param webhookPolicyId The ID of the webhook policy
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return RequestConfig
     */
    fun getWebhookPolicyOfProjectRequestConfig(
        projectNameOrId: kotlin.String,
        webhookPolicyId: kotlin.Long,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        xIsResourceName?.apply { localVariableHeaders["X-Is-Resource-Name"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}".replace(
                "{" + "project_name_or_id" + "}",
                projectNameOrId.toString()
            ).replace("{" + "webhook_policy_id" + "}", webhookPolicyId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get project webhook policy last trigger info
     * This endpoint returns last trigger information of project webhook policy.
     * @param projectNameOrId The name or id of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return kotlin.collections.List<WebhookLastTrigger>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun lastTrigger(
        projectNameOrId: kotlin.String,
        xRequestId: kotlin.String? = null,
        xIsResourceName: kotlin.Boolean? = false
    ): kotlin.collections.List<WebhookLastTrigger> {
        val localVarResponse = lastTriggerWithHttpInfo(
            projectNameOrId = projectNameOrId,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<WebhookLastTrigger>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get project webhook policy last trigger info
     * This endpoint returns last trigger information of project webhook policy.
     * @param projectNameOrId The name or id of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse<kotlin.collections.List<WebhookLastTrigger>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun lastTriggerWithHttpInfo(
        projectNameOrId: kotlin.String,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?
    ): ApiResponse<kotlin.collections.List<WebhookLastTrigger>?> {
        val localVariableConfig = lastTriggerRequestConfig(
            projectNameOrId = projectNameOrId,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName
        )

        return request<Unit, kotlin.collections.List<WebhookLastTrigger>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation lastTrigger
     *
     * @param projectNameOrId The name or id of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return RequestConfig
     */
    fun lastTriggerRequestConfig(
        projectNameOrId: kotlin.String,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        xIsResourceName?.apply { localVariableHeaders["X-Is-Resource-Name"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name_or_id}/webhook/lasttrigger".replace(
                "{" + "project_name_or_id" + "}",
                projectNameOrId.toString()
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List project webhook policies.
     * This endpoint returns webhook policies of a project.
     * @param projectNameOrId The name or id of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return kotlin.collections.List<WebhookPolicy>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listWebhookPoliciesOfProject(
        projectNameOrId: kotlin.String,
        xRequestId: kotlin.String? = null,
        xIsResourceName: kotlin.Boolean? = false,
        sort: kotlin.String? = null,
        q: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10
    ): kotlin.collections.List<WebhookPolicy> {
        val localVarResponse = listWebhookPoliciesOfProjectWithHttpInfo(
            projectNameOrId = projectNameOrId,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName,
            sort = sort,
            q = q,
            page = page,
            pageSize = pageSize
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<WebhookPolicy>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * List project webhook policies.
     * This endpoint returns webhook policies of a project.
     * @param projectNameOrId The name or id of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return ApiResponse<kotlin.collections.List<WebhookPolicy>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listWebhookPoliciesOfProjectWithHttpInfo(
        projectNameOrId: kotlin.String,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?,
        sort: kotlin.String?,
        q: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): ApiResponse<kotlin.collections.List<WebhookPolicy>?> {
        val localVariableConfig = listWebhookPoliciesOfProjectRequestConfig(
            projectNameOrId = projectNameOrId,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName,
            sort = sort,
            q = q,
            page = page,
            pageSize = pageSize
        )

        return request<Unit, kotlin.collections.List<WebhookPolicy>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listWebhookPoliciesOfProject
     *
     * @param projectNameOrId The name or id of the project
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return RequestConfig
     */
    fun listWebhookPoliciesOfProjectRequestConfig(
        projectNameOrId: kotlin.String,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?,
        sort: kotlin.String?,
        q: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        xIsResourceName?.apply { localVariableHeaders["X-Is-Resource-Name"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/projects/{project_name_or_id}/webhook/policies".replace(
                "{" + "project_name_or_id" + "}",
                projectNameOrId.toString()
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update webhook policy of a project.
     * This endpoint is aimed to update the webhook policy of a project.
     * @param projectNameOrId The name or id of the project
     * @param webhookPolicyId The ID of the webhook policy
     * @param policy All properties needed except \&quot;id\&quot;, \&quot;project_id\&quot;, \&quot;creation_time\&quot;, \&quot;update_time\&quot;.
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun updateWebhookPolicyOfProject(
        projectNameOrId: kotlin.String,
        webhookPolicyId: kotlin.Long,
        policy: WebhookPolicy,
        xRequestId: kotlin.String? = null,
        xIsResourceName: kotlin.Boolean? = false
    ): Unit {
        val localVarResponse = updateWebhookPolicyOfProjectWithHttpInfo(
            projectNameOrId = projectNameOrId,
            webhookPolicyId = webhookPolicyId,
            policy = policy,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Update webhook policy of a project.
     * This endpoint is aimed to update the webhook policy of a project.
     * @param projectNameOrId The name or id of the project
     * @param webhookPolicyId The ID of the webhook policy
     * @param policy All properties needed except \&quot;id\&quot;, \&quot;project_id\&quot;, \&quot;creation_time\&quot;, \&quot;update_time\&quot;.
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun updateWebhookPolicyOfProjectWithHttpInfo(
        projectNameOrId: kotlin.String,
        webhookPolicyId: kotlin.Long,
        policy: WebhookPolicy,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?
    ): ApiResponse<Unit?> {
        val localVariableConfig = updateWebhookPolicyOfProjectRequestConfig(
            projectNameOrId = projectNameOrId,
            webhookPolicyId = webhookPolicyId,
            policy = policy,
            xRequestId = xRequestId,
            xIsResourceName = xIsResourceName
        )

        return request<WebhookPolicy, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateWebhookPolicyOfProject
     *
     * @param projectNameOrId The name or id of the project
     * @param webhookPolicyId The ID of the webhook policy
     * @param policy All properties needed except \&quot;id\&quot;, \&quot;project_id\&quot;, \&quot;creation_time\&quot;, \&quot;update_time\&quot;.
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return RequestConfig
     */
    fun updateWebhookPolicyOfProjectRequestConfig(
        projectNameOrId: kotlin.String,
        webhookPolicyId: kotlin.Long,
        policy: WebhookPolicy,
        xRequestId: kotlin.String?,
        xIsResourceName: kotlin.Boolean?
    ): RequestConfig<WebhookPolicy> {
        val localVariableBody = policy
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        xIsResourceName?.apply { localVariableHeaders["X-Is-Resource-Name"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}".replace(
                "{" + "project_name_or_id" + "}",
                projectNameOrId.toString()
            ).replace("{" + "webhook_policy_id" + "}", webhookPolicyId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
