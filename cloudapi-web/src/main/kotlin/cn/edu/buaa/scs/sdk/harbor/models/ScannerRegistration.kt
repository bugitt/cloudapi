/**
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cn.edu.buaa.scs.sdk.harbor.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * Registration represents a named configuration for invoking a scanner via its adapter. 
 *
 * @param uuid The unique identifier of this registration.
 * @param name The name of this registration.
 * @param description An optional description of this registration.
 * @param url A base URL of the scanner adapter
 * @param disabled Indicate whether the registration is enabled or not
 * @param isDefault Indicate if the registration is set as the system default one
 * @param auth Specify what authentication approach is adopted for the HTTP communications. Supported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\" 
 * @param accessCredential An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API. 
 * @param skipCertVerify Indicate if skip the certificate verification when sending HTTP requests
 * @param useInternalAddr Indicate whether use internal registry addr for the scanner to pull content or not
 * @param createTime The creation time of this registration
 * @param updateTime The update time of this registration
 * @param adapter Optional property to describe the name of the scanner registration
 * @param vendor Optional property to describe the vendor of the scanner registration
 * @param version Optional property to describe the version of the scanner registration
 * @param health Indicate the healthy of the registration
 */

data class ScannerRegistration (

    /* The unique identifier of this registration. */
    @field:JsonProperty("uuid")
    val uuid: kotlin.String? = null,

    /* The name of this registration. */
    @field:JsonProperty("name")
    val name: kotlin.String? = null,

    /* An optional description of this registration. */
    @field:JsonProperty("description")
    val description: kotlin.String? = null,

    /* A base URL of the scanner adapter */
    @field:JsonProperty("url")
    val url: kotlin.String? = null,

    /* Indicate whether the registration is enabled or not */
    @field:JsonProperty("disabled")
    val disabled: kotlin.Boolean? = false,

    /* Indicate if the registration is set as the system default one */
    @field:JsonProperty("is_default")
    val isDefault: kotlin.Boolean? = false,

    /* Specify what authentication approach is adopted for the HTTP communications. Supported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"  */
    @field:JsonProperty("auth")
    val auth: kotlin.String? = "",

    /* An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.  */
    @field:JsonProperty("access_credential")
    val accessCredential: kotlin.String? = null,

    /* Indicate if skip the certificate verification when sending HTTP requests */
    @field:JsonProperty("skip_certVerify")
    val skipCertVerify: kotlin.Boolean? = false,

    /* Indicate whether use internal registry addr for the scanner to pull content or not */
    @field:JsonProperty("use_internal_addr")
    val useInternalAddr: kotlin.Boolean? = false,

    /* The creation time of this registration */
    @field:JsonProperty("create_time")
    val createTime: java.time.OffsetDateTime? = null,

    /* The update time of this registration */
    @field:JsonProperty("update_time")
    val updateTime: java.time.OffsetDateTime? = null,

    /* Optional property to describe the name of the scanner registration */
    @field:JsonProperty("adapter")
    val adapter: kotlin.String? = null,

    /* Optional property to describe the vendor of the scanner registration */
    @field:JsonProperty("vendor")
    val vendor: kotlin.String? = null,

    /* Optional property to describe the version of the scanner registration */
    @field:JsonProperty("version")
    val version: kotlin.String? = null,

    /* Indicate the healthy of the registration */
    @field:JsonProperty("health")
    val health: kotlin.String? = ""

)

