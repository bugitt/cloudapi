/**
 * Harbor API
 *
 * These APIs provide services for manipulating Harbor project.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cn.edu.buaa.scs.sdk.harbor.apis

import cn.edu.buaa.scs.sdk.harbor.infrastructure.*
import cn.edu.buaa.scs.sdk.harbor.models.*
import okhttp3.OkHttpClient
import java.io.IOException

class UserApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) :
    ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://localhost/api/v2.0")
        }
    }

    /**
     * Create a local user.
     * This API can be used only when the authentication mode is for local DB.  When self registration is disabled.
     * @param userReq The new user
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun createUser(userReq: UserCreationReq, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = createUserWithHttpInfo(userReq = userReq, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Create a local user.
     * This API can be used only when the authentication mode is for local DB.  When self registration is disabled.
     * @param userReq The new user
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun createUserWithHttpInfo(userReq: UserCreationReq, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = createUserRequestConfig(userReq = userReq, xRequestId = xRequestId)

        return request<UserCreationReq, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createUser
     *
     * @param userReq The new user
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun createUserRequestConfig(userReq: UserCreationReq, xRequestId: kotlin.String?): RequestConfig<UserCreationReq> {
        val localVariableBody = userReq
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Mark a registered user as be removed.
     * This endpoint let administrator of Harbor mark a registered user as removed.It actually won&#39;t be deleted from DB.
     * @param userId User ID for marking as to be removed.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun deleteUser(userId: kotlin.Int, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = deleteUserWithHttpInfo(userId = userId, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Mark a registered user as be removed.
     * This endpoint let administrator of Harbor mark a registered user as removed.It actually won&#39;t be deleted from DB.
     * @param userId User ID for marking as to be removed.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteUserWithHttpInfo(userId: kotlin.Int, xRequestId: kotlin.String?): ApiResponse<Unit?> {
        val localVariableConfig = deleteUserRequestConfig(userId = userId, xRequestId = xRequestId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteUser
     *
     * @param userId User ID for marking as to be removed.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun deleteUserRequestConfig(userId: kotlin.Int, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/users/{user_id}".replace("{" + "user_id" + "}", userId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get current user info.
     *
     * @param xRequestId An unique ID for the request (optional)
     * @return UserResp
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getCurrentUserInfo(xRequestId: kotlin.String? = null): UserResp {
        val localVarResponse = getCurrentUserInfoWithHttpInfo(xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserResp
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get current user info.
     *
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<UserResp?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCurrentUserInfoWithHttpInfo(xRequestId: kotlin.String?): ApiResponse<UserResp?> {
        val localVariableConfig = getCurrentUserInfoRequestConfig(xRequestId = xRequestId)

        return request<Unit, UserResp>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCurrentUserInfo
     *
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getCurrentUserInfoRequestConfig(xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get current user permissions.
     *
     * @param xRequestId An unique ID for the request (optional)
     * @param scope The scope for the permission (optional)
     * @param relative If true, the resources in the response are relative to the scope, eg for resource &#39;/project/1/repository&#39; if relative is &#39;true&#39; then the resource in response will be &#39;repository&#39;.  (optional)
     * @return kotlin.collections.List<Permission>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getCurrentUserPermissions(
        xRequestId: kotlin.String? = null,
        scope: kotlin.String? = null,
        relative: kotlin.Boolean? = null
    ): kotlin.collections.List<Permission> {
        val localVarResponse =
            getCurrentUserPermissionsWithHttpInfo(xRequestId = xRequestId, scope = scope, relative = relative)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Permission>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get current user permissions.
     *
     * @param xRequestId An unique ID for the request (optional)
     * @param scope The scope for the permission (optional)
     * @param relative If true, the resources in the response are relative to the scope, eg for resource &#39;/project/1/repository&#39; if relative is &#39;true&#39; then the resource in response will be &#39;repository&#39;.  (optional)
     * @return ApiResponse<kotlin.collections.List<Permission>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCurrentUserPermissionsWithHttpInfo(
        xRequestId: kotlin.String?,
        scope: kotlin.String?,
        relative: kotlin.Boolean?
    ): ApiResponse<kotlin.collections.List<Permission>?> {
        val localVariableConfig =
            getCurrentUserPermissionsRequestConfig(xRequestId = xRequestId, scope = scope, relative = relative)

        return request<Unit, kotlin.collections.List<Permission>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCurrentUserPermissions
     *
     * @param xRequestId An unique ID for the request (optional)
     * @param scope The scope for the permission (optional)
     * @param relative If true, the resources in the response are relative to the scope, eg for resource &#39;/project/1/repository&#39; if relative is &#39;true&#39; then the resource in response will be &#39;repository&#39;.  (optional)
     * @return RequestConfig
     */
    fun getCurrentUserPermissionsRequestConfig(
        xRequestId: kotlin.String?,
        scope: kotlin.String?,
        relative: kotlin.Boolean?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (scope != null) {
                    put("scope", listOf(scope.toString()))
                }
                if (relative != null) {
                    put("relative", listOf(relative.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/current/permissions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get a user&#39;s profile.
     *
     * @param userId
     * @param xRequestId An unique ID for the request (optional)
     * @return UserResp
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getUser(userId: kotlin.Int, xRequestId: kotlin.String? = null): UserResp {
        val localVarResponse = getUserWithHttpInfo(userId = userId, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserResp
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get a user&#39;s profile.
     *
     * @param userId
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<UserResp?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserWithHttpInfo(userId: kotlin.Int, xRequestId: kotlin.String?): ApiResponse<UserResp?> {
        val localVariableConfig = getUserRequestConfig(userId = userId, xRequestId = xRequestId)

        return request<Unit, UserResp>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUser
     *
     * @param userId
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun getUserRequestConfig(userId: kotlin.Int, xRequestId: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{user_id}".replace("{" + "user_id" + "}", userId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List users
     *
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return kotlin.collections.List<UserResp>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun listUsers(
        xRequestId: kotlin.String? = null,
        q: kotlin.String? = null,
        sort: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10
    ): kotlin.collections.List<UserResp> {
        val localVarResponse =
            listUsersWithHttpInfo(xRequestId = xRequestId, q = q, sort = sort, page = page, pageSize = pageSize)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<UserResp>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * List users
     *
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return ApiResponse<kotlin.collections.List<UserResp>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listUsersWithHttpInfo(
        xRequestId: kotlin.String?,
        q: kotlin.String?,
        sort: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): ApiResponse<kotlin.collections.List<UserResp>?> {
        val localVariableConfig =
            listUsersRequestConfig(xRequestId = xRequestId, q = q, sort = sort, page = page, pageSize = pageSize)

        return request<Unit, kotlin.collections.List<UserResp>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listUsers
     *
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return RequestConfig
     */
    fun listUsersRequestConfig(
        xRequestId: kotlin.String?,
        q: kotlin.String?,
        sort: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Search users by username
     * This endpoint is to search the users by username.  It&#39;s open for all authenticated requests.
     * @param username Username for filtering results.
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return kotlin.collections.List<UserSearchRespItem>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun searchUsers(
        username: kotlin.String,
        xRequestId: kotlin.String? = null,
        page: kotlin.Long? = 1,
        pageSize: kotlin.Long? = 10
    ): kotlin.collections.List<UserSearchRespItem> {
        val localVarResponse =
            searchUsersWithHttpInfo(username = username, xRequestId = xRequestId, page = page, pageSize = pageSize)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<UserSearchRespItem>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Search users by username
     * This endpoint is to search the users by username.  It&#39;s open for all authenticated requests.
     * @param username Username for filtering results.
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return ApiResponse<kotlin.collections.List<UserSearchRespItem>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchUsersWithHttpInfo(
        username: kotlin.String,
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): ApiResponse<kotlin.collections.List<UserSearchRespItem>?> {
        val localVariableConfig =
            searchUsersRequestConfig(username = username, xRequestId = xRequestId, page = page, pageSize = pageSize)

        return request<Unit, kotlin.collections.List<UserSearchRespItem>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchUsers
     *
     * @param username Username for filtering results.
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return RequestConfig
     */
    fun searchUsersRequestConfig(
        username: kotlin.String,
        xRequestId: kotlin.String?,
        page: kotlin.Long?,
        pageSize: kotlin.Long?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                put("username", listOf(username.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Set CLI secret for a user.
     * This endpoint let user generate a new CLI secret for himself.  This API only works when auth mode is set to &#39;OIDC&#39;. Once this API returns with successful status, the old secret will be invalid, as there will be only one CLI secret for a user.
     * @param userId User ID
     * @param secret
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun setCliSecret(userId: kotlin.Int, secret: OIDCCliSecretReq, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse = setCliSecretWithHttpInfo(userId = userId, secret = secret, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Set CLI secret for a user.
     * This endpoint let user generate a new CLI secret for himself.  This API only works when auth mode is set to &#39;OIDC&#39;. Once this API returns with successful status, the old secret will be invalid, as there will be only one CLI secret for a user.
     * @param userId User ID
     * @param secret
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun setCliSecretWithHttpInfo(
        userId: kotlin.Int,
        secret: OIDCCliSecretReq,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig = setCliSecretRequestConfig(userId = userId, secret = secret, xRequestId = xRequestId)

        return request<OIDCCliSecretReq, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation setCliSecret
     *
     * @param userId User ID
     * @param secret
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun setCliSecretRequestConfig(
        userId: kotlin.Int,
        secret: OIDCCliSecretReq,
        xRequestId: kotlin.String?
    ): RequestConfig<OIDCCliSecretReq> {
        val localVariableBody = secret
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/users/{user_id}/cli_secret".replace("{" + "user_id" + "}", userId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update a registered user to change to be an administrator of Harbor.
     *
     * @param userId
     * @param sysadminFlag Toggle a user to admin or not.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun setUserSysAdmin(userId: kotlin.Int, sysadminFlag: UserSysAdminFlag, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse =
            setUserSysAdminWithHttpInfo(userId = userId, sysadminFlag = sysadminFlag, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Update a registered user to change to be an administrator of Harbor.
     *
     * @param userId
     * @param sysadminFlag Toggle a user to admin or not.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun setUserSysAdminWithHttpInfo(
        userId: kotlin.Int,
        sysadminFlag: UserSysAdminFlag,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig =
            setUserSysAdminRequestConfig(userId = userId, sysadminFlag = sysadminFlag, xRequestId = xRequestId)

        return request<UserSysAdminFlag, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation setUserSysAdmin
     *
     * @param userId
     * @param sysadminFlag Toggle a user to admin or not.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun setUserSysAdminRequestConfig(
        userId: kotlin.Int,
        sysadminFlag: UserSysAdminFlag,
        xRequestId: kotlin.String?
    ): RequestConfig<UserSysAdminFlag> {
        val localVariableBody = sysadminFlag
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/users/{user_id}/sysadmin".replace("{" + "user_id" + "}", userId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Change the password on a user that already exists.
     * This endpoint is for user to update password. Users with the admin role can change any user&#39;s password. Regular users can change only their own password.
     * @param userId
     * @param password Password to be updated, the attribute &#39;old_password&#39; is optional when the API is called by the system administrator.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun updateUserPassword(userId: kotlin.Int, password: PasswordReq, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse =
            updateUserPasswordWithHttpInfo(userId = userId, password = password, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Change the password on a user that already exists.
     * This endpoint is for user to update password. Users with the admin role can change any user&#39;s password. Regular users can change only their own password.
     * @param userId
     * @param password Password to be updated, the attribute &#39;old_password&#39; is optional when the API is called by the system administrator.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun updateUserPasswordWithHttpInfo(
        userId: kotlin.Int,
        password: PasswordReq,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig =
            updateUserPasswordRequestConfig(userId = userId, password = password, xRequestId = xRequestId)

        return request<PasswordReq, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateUserPassword
     *
     * @param userId
     * @param password Password to be updated, the attribute &#39;old_password&#39; is optional when the API is called by the system administrator.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun updateUserPasswordRequestConfig(
        userId: kotlin.Int,
        password: PasswordReq,
        xRequestId: kotlin.String?
    ): RequestConfig<PasswordReq> {
        val localVariableBody = password
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/users/{user_id}/password".replace("{" + "user_id" + "}", userId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update user&#39;s profile.
     *
     * @param userId Registered user ID
     * @param profile Only email, realname and comment can be modified.
     * @param xRequestId An unique ID for the request (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun updateUserProfile(userId: kotlin.Int, profile: UserProfile, xRequestId: kotlin.String? = null): Unit {
        val localVarResponse =
            updateUserProfileWithHttpInfo(userId = userId, profile = profile, xRequestId = xRequestId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Update user&#39;s profile.
     *
     * @param userId Registered user ID
     * @param profile Only email, realname and comment can be modified.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun updateUserProfileWithHttpInfo(
        userId: kotlin.Int,
        profile: UserProfile,
        xRequestId: kotlin.String?
    ): ApiResponse<Unit?> {
        val localVariableConfig =
            updateUserProfileRequestConfig(userId = userId, profile = profile, xRequestId = xRequestId)

        return request<UserProfile, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateUserProfile
     *
     * @param userId Registered user ID
     * @param profile Only email, realname and comment can be modified.
     * @param xRequestId An unique ID for the request (optional)
     * @return RequestConfig
     */
    fun updateUserProfileRequestConfig(
        userId: kotlin.Int,
        profile: UserProfile,
        xRequestId: kotlin.String?
    ): RequestConfig<UserProfile> {
        val localVariableBody = profile
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/users/{user_id}".replace("{" + "user_id" + "}", userId.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
